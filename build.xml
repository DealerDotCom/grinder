<?xml version="1.0" encoding='ISO-8859-1'?>
<!--

"How to build the Grinder" by Philip Aston.

Introduction
============

The Cocoon (http://xml.apache.org/) build.xml file says:

    "Cocoon is an highly componentized software. This means: they are
    lazy and reuse whatever possible. But also means: we avoid
    duplication of efforts and Cocoon development can go on
    concurrently with the other used projects without interference. At
    the end: Cocoon evolves much faster :)"

Now guess where I ripped this off from? :-)


Ant
===

The Grinder build system is based on Jakarta Ant, which is a Java
building tool originally developed for the Jakarta Tomcat project but
now used in many other Apache projects and extended by many
developers.

Ant is a little but very handy tool that uses a build file written in XML
(this file) as building instructions. For more information refer to
"http://jakarta.apache.org/ant/".


What do I do?
=============

Do the following:

	1. Acquire and install Ant 1.2
	   (http://jakarta.apache.org/ant/index.html).

	2. Set/export ANT_HOME, JAVA_HOME and PATH as described
	   in the Ant user guide.

       	3. Type ant


Say 
	ant -projecthelp

for details of other targets. The compilation targets do depend on the
"clean" target, to rebuild you need to say "ant clean compile".

The build auto-detects what modules to build by checking your
CLASSPATH for classes the module depends on. You may have to unset
your CLASSPATH if this doesn't do what you want. Currently the
conditionally built modules are:

   HTTP SSL plugin (Needs the JSSE 1.0.2)
   TCPSniffer SSL engine (Needs the JSSE 1.0.2)
   TCPSniffer HTTP plugin filter (Needs Apache Jakarta Regexp 1.2)
   JUnit test cases (needs JUnit 3.4 and Ant 1.2 optional.jar)

Ant hint for cygwin users: Copy "ant" from the Ant bin directory into
a directory earilier in your path and run it through sed -e 's#:#;#g'

-->

<project name="The Grinder" default="jar" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <!-- what -->
    <property name="Name" value="The Grinder"/>
    <property name="name" value="grinder"/>
    <property name="version" value="2.3.2"/>
    <property name="year" value="2001"/>

    <!--options-->
    <available classname="javax.net.ssl.SSLSocketFactory"
	       property="have.jsse" />

    <available classname="junit.framework.TestCase"
	       property="have.junit" />

    <available classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
	       property="have.junit.task" />

    <available classname="org.apache.regexp.RE"
	       property="have.regexp" />

    <!-- javac switches -->
    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="on"/>

    <!-- source of all evil -->
    <property name="src.dir" value="src"/>
    <property name="tests.src.dir" value="tests-src"/>
    <property name="etc.dir" value="etc"/>
    <property name="examples.dir" value="examples"/>

    <!-- javadoc -->
    <property name="javadoc.dir" value="doc/javadoc"/>
    <property name="javadoc.packages" value="net.grinder.*"/>
    <property name="javadoc.css" value="${etc.dir}/javadoc.css"/>

    <!-- output -->
    <property name="build.dir" value="build"/>
    <property name="build.src" value="${build.dir}/src"/>
    <property name="build.classes" value="${build.dir}/classes"/>
    <property name="tests.src" value="${build.dir}/tests-src"/>
    <property name="tests.classes" value="${build.dir}/tests-classes"/>
    <property name="lib.dir" value="lib"/>
    <property name="lib.jar" value="${name}.jar"/>
    <property name="dist.root" value="${build.dir}/distribution"/>
    <property name="dist.dir" value="${dist.root}/${name}-${version}"/>

    <!-- filter tokens -->
    <filter token="year" value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date" value="${TODAY}"/>

    <echo message="** Building ${Name} ${version} [${year}] on ${TODAY} **"/>
  </target>

  <!-- =================================================================== -->
  <!-- Useful assertions                                                   -->
  <!-- =================================================================== -->
  <target name="assert-have-jsse" depends="init" unless="have.jsse">
   <fail message="Add JSSE 1.0.2 to your CLASSPATH to build this target"/>
  </target>

  <target name="assert-have-junit" depends="init" unless="have.junit">
   <fail message="Install the Ant optional.jar to build this target"/>
  </target>

  <target name="assert-have-junit-task" depends="init"
	  unless="have.junit.task">
   <fail message="Add JUnit 3.4 to your CLASSPATH to build this target"/>
  </target>

  <target name="assert-have-regexp" depends="init" unless="have.regexp">
   <fail message="Add Apache Regexp 1.2 to your CLASSPATH to build this target"/>
  </target>

  <target name="assert-have-everything"
	  depends="assert-have-jsse,assert-have-junit,assert-have-junit-task,assert-have-regexp">
  </target>



  <!-- =================================================================== -->
  <!-- Rules that prepare a filtered copy of the appropriate source code   -->
  <!-- =================================================================== -->
  <target name="prepare-src" depends="init">
    <copy todir="${build.src}" filtering="on">
      <fileset dir="${src.dir}"/>
    </copy>
  </target>

  <target name="prepare-test-src" depends="init">
    <copy todir="${tests.src}" filtering="on">
      <fileset dir="${tests.src.dir}"/>
    </copy>
  </target>


  <!-- =================================================================== -->
  <!-- Compilation rules                                    -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare-src"
	  description="Compiles the source.">
    <mkdir dir="${build.classes}"/>

    <javac srcdir="${build.src}"
           destdir="${build.classes}"
           debug="${debug}"
           optimize="${optimize}"
	   deprecation="${deprecation}">
       <exclude name="**/HttpsPlugin.java" unless="have.jsse"/>
       <exclude name="**/SSLSnifferEngineImpl.java" unless="have.jsse"/>
       <exclude name="**/HttpPluginSnifferFilter.java" unless="have.regexp"/>

    </javac>
  </target>

  <target name="compile-tests"
	  depends="assert-have-junit,prepare-test-src,compile"
	  description="Compiles the tests source">
    <mkdir dir="${tests.classes}"/>

    <javac srcdir="${tests.src}"
           destdir="${tests.classes}"
	   classpath="${build.classes}"
           debug="${debug}"
           optimize="${optimize}"
	   deprecation="${deprecation}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the jar                                                     -->
  <!-- =================================================================== -->
  <target name="jar" depends="compile"
	  description="Default target, creates lib/grinder.jar.">
    <mkdir dir="${lib.dir}"/>

    <jar jarfile="${lib.dir}/${lib.jar}"
         basedir="${build.classes}"
         includes="net/grinder/"/>
  </target>


  <!-- =================================================================== -->
  <!-- Rules to run the tests                                              -->
  <!-- =================================================================== -->
  <target name="test" depends="compile-tests,assert-have-junit-task"
	  description="Run the unit-tests.">
  <junit printsummary="false" haltonfailure="true">
    <formatter type="plain" usefile="false"/>

    <classpath path="${tests.classes};${build.classes}"/>

    <test name="net.grinder.AllTests"/>
  </junit>

  </target>


  <!-- =================================================================== -->
  <!-- Rules to create the API documentation                               -->
  <!-- =================================================================== -->
  <target name="javadoc" depends="init" description="Generates the javadoc.">
    <mkdir dir="${javadoc.dir}"/>
    <javadoc packagenames="${javadoc.packages}"
             destdir="${javadoc.dir}"
             author="true"
             version="false"
             use="false"
             noindex="false"
             windowtitle="${Name}"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} Paco Gómez, Philip Aston. All Rights Reserved."
             stylesheetfile="${javadoc.css}"
	     package="true">
	    <sourcepath>
	      <pathelement path="${src.dir}"/>
	      <pathelement path="${tests.src.dir}"/>
	    </sourcepath>
    </javadoc>
  </target>


  <!-- =================================================================== -->
  <!-- Creates the distribution hierachy                                   -->
  <!-- =================================================================== -->
  <target name="distribute-javadoc" depends="javadoc">
    <copy todir="${dist.dir}/${javadoc.dir}">
      <fileset dir="${javadoc.dir}"/>
    </copy>
  </target>

  <target name="distribution-hierarchy" depends="compile,jar">

    <copy todir="${dist.dir}/${src.dir}" filtering="on">
      <fileset dir="${src.dir}"/>
    </copy>

    <copy todir="${dist.dir}/${tests.src.dir}" filtering="on">
      <fileset dir="${tests.src.dir}"/>
    </copy>

    <copy file="${lib.dir}/${lib.jar}"
	  tofile="${dist.dir}/${lib.dir}/${lib.jar}"/>

    <copy todir="${dist.dir}/${etc.dir}">
      <fileset dir="${etc.dir}" excludes="buildenv.sh,setenv.sh"/>
    </copy>

    <copy todir="${dist.dir}/${examples.dir}">
      <fileset dir="${examples.dir}" excludes="**/log/**"/>
    </copy>

    <copy todir="${dist.dir}" filtering="on">
      <fileset dir="."
	       includes="build.xml, AUTHORS, ChangeLog, CHANGES, COPYING, README, TODO"
	       excludes="prj.el"/>
    </copy>

    <chmod perm="+x" file="${dist.dir}/build.sh"/>
    <fixcrlf srcdir="${dist.dir}" includes="build.sh" cr="remove"/>
    <fixcrlf srcdir="${dist.dir}" includes="build.bat" cr="add"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution as .zip                                   -->
  <!-- =================================================================== -->
  <target name="dist" depends="distribution-hierarchy,test"
	  description="Generates a distribution jar.">
    <jar jarfile="${name}-pre-${version}-${DSTAMP}.jar"
	 basedir="${dist.root}"/>
  </target>

  <target name="release" depends="assert-have-everything,realclean,test,distribution-hierarchy,distribute-javadoc"
	  description="Generates a release jar.">
<!--      <cvs command="tag -R release_${version}" noexec="true"/> -->
    <jar jarfile="${name}-${version}.jar" basedir="${dist.root}"/>

    <echo message="****************************************************"/>
    <echo message="*** Now say 'cvs tag -R release_${version}"/>
    <echo message="*** and update the version number in build.xml"/>
    <echo message="***"/>
    <echo message="*** If you forgot to update the ChangeLog or commit"/>
    <echo message="*** everything, take a deep breath and try again."/>
    <echo message="****************************************************"/>
  </target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init" description="Removes class files.">
    <delete dir="${build.dir}"/>
  </target>

  <target name="realclean" depends="clean"
	  description="Removes all generated files.">
    <delete dir="${dist.root}"/>
    <delete dir="${javadoc.dir}"/>
    <delete dir="${lib.dir}"/>
  </target>

</project>

<!-- End of file -->
