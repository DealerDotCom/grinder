<!--

"How to build the Grinder" by Philip Aston.

Introduction
============

The Cocoon (http://xml.apache.org/) build.xml file says:

    "Cocoon is an highly componentized software. This means: they are
    lazy and reuse whatever possible. But also means: we avoid
    duplication of efforts and Cocoon development can go on
    concurrently with the other used projects without interference. At
    the end: Cocoon evolves much faster :)"

Now guess where I ripped this off from? :-)


Ant
===

The Grinder build system is based on Jakarta Ant, which is a Java
building tool originally developed for the Jakarta Tomcat project but
now used in many other Apache projects and extended by many
developers.

Ant is a little but very handy tool that uses a build file written in XML
(this file) as building instructions. For more information refer to
"http://jakarta.apache.org/ant/".


What do I do?
=============

Do the following:

	1. Acquire and install Ant 1.2
	   (http://jakarta.apache.org/ant/index.html).

	2. Set/export ANT_HOME, JAVA_HOME and PATH as described
	   in the Ant user guide.

       	3. Type ant


Say 
	ant -projecthelp

for details of other targets.

The build auto-detects what modules to build by checking your
classpath for classes the module depends on. You may have to unset your
classpath if this doesn't do what you want. Currently the conditionally built modules are:

   HTTP SSL plugin (Needs the JSSE 1.0.2)
   TCPSniffer SSL engine (Needs the JSSE 1.0.2)
   TCPSniffer HTTP plugin filter (Needs Apache Jakarta Regexp 1.2)
   WebLogic Server Trader EJB plugin (needs WLS 5.1 Trader EJB)
   JUnit test cases (needs JUnit 3.4)

Ant hint for cygwin users: Copy "ant" from the Ant bin directory into
a directory earilier in your path and run it through sed -e 's#:#;#g'

-->

<project name="The Grinder" default="jar" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <!-- what -->
    <property name="Name" value="Grinder"/>
    <property name="name" value="grinder"/>
    <property name="version" value="2.0"/>
    <property name="year" value="2000"/>

    <!--options-->
    <available classname="javax.net.ssl.SSLSocketFactory"
	       property="have.jsse" />

    <available classname="examples.ejb.basic.statelessSession.Trader"
	       property="have.weblogic.traderEJB" />

    <available classname="org.apache.regexp.RE"
	       property="have.jakarta.regexp" />

    <available classname="junit.framework.TestCase"
	       property="have.junit" />

    <!-- javac switches -->
    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="on"/>

    <!-- source of all evil -->
    <property name="src.dir" value="src"/>
    <property name="etc.dir" value="etc"/>
    <property name="examples.dir" value="examples"/>

    <!-- javadoc -->
    <property name="javadoc.dir" value="doc/javadoc"/>
    <property name="javadoc.packages" value="net.grinder.*"/>
    <property name="javadoc.css" value="${etc.dir}/javadoc.css"/>

    <!-- output -->
    <property name="build.dir" value="build"/>
    <property name="build.src" value="${build.dir}/src"/>
    <property name="build.classes" value="${build.dir}/classes"/>
    <property name="lib.dir" value="lib"/>
    <property name="lib.jar" value="${name}.jar"/>
    <property name="dist.root" value="distribution"/>
    <property name="dist.dir" value="${dist.root}/${name}-${version}"/>

    <!-- filter tokens -->
    <filter token="year" value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date" value="${TODAY}"/>

    <echo message="** Building ${Name} ${version} [${year}] on ${TODAY} **"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares a copy of the source code                                  -->
  <!-- =================================================================== -->

    <!-- No idea why, but ant doesn't expand ${src.dir} in the following. -->
  <fileset id="base.src"
	   dir="src"
	   excludes="net/grinder/plugin/http/HttpsPlugin.java,net/grinder/tools/tcpsniffer/SSLSnifferEngineImpl.java,net/grinder/plugin/weblogic/,net/grinder/plugin/http/HttpsPluginSnifferFilter.java,**/JUnit*.java"/>

  <fileset id="jsse.dependent.src"
	   dir="src"
	   includes="net/grinder/plugin/http/HttpsPlugin.java,net/grinder/tools/tcpsniffer/SSLSnifferEngineImpl.java"/>

  <fileset id="weblogic.traderEJB.dependent.src"
	   dir="src"
	   includes="net/grinder/plugin/weblogic/"/>

  <fileset id="jakarta.regexp.dependent.src"
	   dir="src"
	   includes="net/grinder/plugin/http/HttpsPluginSnifferFilter.java"/>

  <fileset id="junit.dependent.src"
	   dir="src"
	   includes="**/JUnit*.java"/>

  <target name="prepare-jsse-src" if="have.jsse" depends="init">
    <copy todir="${build.src}" filtering="on">
      <fileset refid="jsse.dependent.src"/>
    </copy>
  </target>

  <target name="prepare-weblogic-traderEJB-src" if="have.weblogic.traderEJB"
	  depends="init">
    <copy todir="${build.src}" filtering="on">
      <fileset refid="weblogic.traderEJB.dependent.src"/>
    </copy>
  </target>

  <target name="prepare-jakarta-regexp-src" if="have.jakarta.regexp"
	  depends="init">
    <copy todir="${build.src}" filtering="on">
      <fileset refid="jakarta.regexp.dependent.src"/>
    </copy>
  </target>

  <target name="prepare-junit-src" if="have.junit" depends="init">
    <copy todir="${build.src}" filtering="on">
      <fileset refid="junit.dependent.src"/>
    </copy>
  </target>

  <target name="prepare-src"
	  depends="init,prepare-jsse-src,prepare-weblogic-traderEJB-src,prepare-jakarta-regexp-src,prepare-junit-src">
    <copy todir="${build.src}" filtering="on">
      <fileset refid="base.src"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare-src" description="Runs javac.">
    <mkdir dir="${build.classes}"/>

    <javac srcdir="${build.src}"
           destdir="${build.classes}"
           debug="${debug}"
           optimize="${optimize}"
	   deprecation="${deprecation}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the classes jar                                             -->
  <!-- =================================================================== -->
  <target name="jar" depends="compile"
	  description="Default target, creates lib/grinder.jar.">
    <mkdir dir="${lib.dir}"/>

    <jar jarfile="${lib.dir}/${lib.jar}"
         basedir="${build.classes}"
         manifest="${build.src}/manifest.mf"
         includes="net/grinder/"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadoc" depends="init" description="Generates the javadoc.">
    <mkdir dir="${javadoc.dir}"/>
    <javadoc packagenames="${javadoc.packages}"
             sourcepath="${src.dir}"
             destdir="${javadoc.dir}"
             author="true"
             version="false"
             use="false"
             noindex="false"
             windowtitle="${Name}"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} Paco Gomez, Philip Aston. All Rights Reserved."
             stylesheetfile="${javadoc.css}"
	     />
  </target>

  <!-- =================================================================== -->
  <!-- Creates the distribution hierachy                                   -->
  <!-- =================================================================== -->
  <target name="distribute-javadoc" depends="init,javadoc">
    <copy todir="${dist.dir}/${javadoc.dir}">
      <fileset dir="${javadoc.dir}"/>
    </copy>
  </target>

  <target name="distribution-hierarchy" depends="compile,jar">

    <copy todir="${dist.dir}/${src.dir}" filtering="on">
      <fileset dir="${src.dir}"/>
    </copy>

    <copy file="${lib.dir}/${lib.jar}"
	  tofile="${dist.dir}/${lib.dir}/${lib.jar}"/>

    <copy todir="${dist.dir}/${etc.dir}">
      <fileset dir="${etc.dir}" excludes="buildenv.sh,setenv.sh"/>
    </copy>

    <copy todir="${dist.dir}/${examples.dir}">
      <fileset dir="${examples.dir}" excludes="**/log/**"/>
    </copy>

    <copy todir="${dist.dir}" filtering="on">
      <fileset dir="."
	       includes="build.xml, ChangeLog, CHANGES, COPYING, README, TODO"
	       excludes="prj.el"/>
    </copy>

    <chmod perm="+x" file="${dist.dir}/build.sh"/>
    <fixcrlf srcdir="${dist.dir}" includes="build.sh" cr="remove"/>
    <fixcrlf srcdir="${dist.dir}" includes="build.bat" cr="add"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution as .zip                                   -->
  <!-- =================================================================== -->
  <target name="dist" depends="distribution-hierarchy"
	  description="Generates a distribution jar.">
    <jar jarfile="${name}-${version}-${DSTAMP}.jar" basedir="${dist.root}"/>
  </target>

  <target name="release" depends="distribution-hierarchy, distribute-javadoc"
	  description="Generates a release jar.">
      <!-- TODO -->
<!--      <cvs command="tag -R release_${version}" noexec="true"/> -->
    <jar jarfile="${name}-${version}.jar" basedir="${dist.root}"/>

    <echo message="Now say 'cvs tag -R release_${version}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init" description="Removes class files.">
    <delete dir="${build.dir}"/>
  </target>

  <target name="realclean" depends="clean"
	  description="Removes all generated files.">
    <delete dir="${dist.root}"/>
    <delete dir="${javadoc.dir}"/>
    <delete dir="${lib.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- For old time's sake...                                              -->
  <!-- =================================================================== -->
  <target name="cruelworld" depends="realclean, dist">
  </target>

</project>

<!-- End of file -->
