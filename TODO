[If anyone wants to pick something of this wish list, I prefer unified
diff patches. Mail them to grinder-development@lists.sourceforge.net.
The wish list is part of the distribution, I'll accept patches against
it too :-). The list is roughly in priority order.]

Is ditching grinder.properties defined tests sensible? Yes. Don't want
dual maintenance. Cost is everyone needs jython.

Separate out a PluginProcessContextImplementation? And for
ThreadContext?

Split script into declaration and usage? NO. Single test script is
good - script needs thread specific handles to the tests. These are
HTTPTests. In future, may be value in crystalising concept of
"registered test" which is not thread specific.

Need to associate HTTPTest with plugin. Eventually there should be a
PluginRegistry. The HTTPTest can get the plugin from the registry.
Creating an HTTPTest should initialise the plugin if not already done.

Try to get rid of StringBeans...

When HTTPTest etc know about the plugin, where do the lifecycle (begin
run etc) callbacks go? To all known plugins? Probably. How important
is the plugin lifecycle? Can plugins become libraries for HTTPTest etc
to use? Hmmm.. thread callbacks seem important.

Abstract out a TestScheduler interface to allow other algorithms. Add
a "random order" algorithm, which might work well with the JUnit
plugin. Flesh out the API so custom script schedulers can be
supported.

Use the console to broadcast scripts to grinder processes. XML
containing embedded script.

Code clean up:
	- All files should use DOS format.



  TCPSniffer in -proxy mode shouldn't need -remoteHost.

  TCPSniffer/HTTPPlugin bug when recording large outputs with posts?

  Update HTTPClient to support "mean time to first byte".

  Write more JUnit tests.

  Find out how to stop net.grinder.console.swing.TestGraph from
  preventing parent process from detecting exit status. (For example,
  when used with the JUnit plugin). Surely System.exit() is not the
  answer?

  Get the communications tests and the swing tests running under the
  JUnit plugin.

  Add an assertion for the expected status code to the HTTP plugin.
  HTTP Plugin "not ok".

  TCPSniffer enhancements: proxying works on a per-protocol basis, so
  write some plugins for the proxy to handle different protocols, and
  integrate it more fully into the TCPSniffer

  Measure test variance. This would involve the console broadcasting
  the total mean, and then listening for the reported variance.

  Tests show that, at least with the NT IP stack, it is quite possible
  to overflow the multicast buffering and hence lose messages. We
  detect this condition and raise error messages, so this doesn't
  concern me from the "correctness perspective", but the communication
  to the console should be changed to be unicast.

  Minor fixes to build.xml:
	Fix the permissions in the distribution files.
	
  Minor fixes to HttpPluginSnifferFilter:
	Respect charset information.
	Sanity check the processing against RFC 2616

  Efficiency: TestStatisticsMap.getDelta() to be able to reuse delta
  object.

  Alter console to use Timer.scheduleAtFixedRate for more accuracy.

  Tidy up logging of plugin initialisation.

  TCPSniffer should record 401 iteractions.
