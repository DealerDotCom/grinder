-*- mode:outline; minor-mode:outl-mouse -*-

If anyone wants to pick something off this wish list, let me know
first. I prefer unified diff patches. Mail them to
grinder-development@lists.sourceforge.net.

The wish list is part of the distribution, I'll accept patches against
it too :-).

- Phil


* Bugs

** Sourceforge 691728

http://sourceforge.net/tracker/index.php?func=detail&aid=691728&group_id=18598&atid=118598

Grinder script was auto-generated with TCPProxy, when
creating script typical delay on the user side was 1-10
seconds, however, in the script, there are commands
inserted that make the Grinder to fall asleep even for an
hour, e.g. sleep(4348063)

** That EOF and retries thing

http://sourceforge.net/mailarchive/message.php?msg_id=2027628
http://sourceforge.net/mailarchive/message.php?msg_id=3626264

** TCP Proxy

Sniffer vs redirection. Think there are some bugs here.

Recording \n's?

When visting xweb.sf.net via proxy and then going back to main page,
the target servers get foobared.

Fix the proxy to record Authorization again. Can use connection ID.
The G2 HTTPClient plugin implementation interprets basicAuthentication
properties wrongly. It first sends a request without the
authentication headers, then catches the 401 and automatically resends
a request with the authentication headers.

Allow "chained proxying", where details of real proxy server can be
specified.

** Console detection

If process detects it can't send data to the console, it shouldn't
wait for console signals.

* Enhancements

** Measure variance (Ambitious)

Measure test variance. This would involve the console broadcasting the
total mean, and then listening for the reported variance.

** Console

*** Script editing

Add file tree control, rooted at root directory.
Allow files to be marked for distribution. Any file.
Automatically detect, and mark, scripts.
When new script is selected, unselect other script.

Extend comms to allow files to be retrieved. Hash and cache at
individual file level. The agent should retrieve the files and store
on disk.

How to send script - multicast is not the answer.

**** Plans

Replace jEdit-syntax with new jEdit syntax package when available, if
its license terms are acceptable.

Allow file sets to be saved and loaded.

Allow grinder properties to be set remotely.

*** Add log panel

Report log messages that currently go to terminal, plus start, stop
test runs etc.

** TCPProxy

TCPProxy should be able to work through proxies.

Change TCP sniffer filters to a stream oriented model. This should
cure another one of the TCPSniffer/HTTPPlugin bug when recording large
outputs with posts? Also, consider having a filter instance pair per
connection.

** HTTP Plugin

Authorisation tear down

HTTP plugin to support "mean time to first byte".

Script support for HTTP "system property" options.

** Scripting

Add per-run statistics. This would also allow number of aborted runs
to be recorded.

Script access to global statistics.

Make 'grinder' a member of an implicit module that gets auto-imported
into the top level script module => you can import the special module
elsewhere.

'grinder' object should be valid in __init__.

*** Error reporting

 > It would be possible for certain classes of error (AttributeError
 > being a good example) to spew out just
 > 
 >       Unknown attribute GETx at "http.py", line 9 in __call__.
 > 
 > Is this what you're after?
^^ To do this, might have to behave differently with 1 thread vs many.


** Other HTTP/HTML libraries

DeSouza, Edwin writes:
 > Instead of using:
 > http://www.innovation.ch/java/HTTPClient/index.html
 > <http://www.innovation.ch/java/HTTPClient/FAQ.html> 
 >  
 > How about using Jakarta Commons HttpClient (more popular and Apache
 > License):
 > http://jakarta.apache.org/commons/httpclient/index.html


Justin Spears writes:
 > I am new to grinder, however I found the built in HTTPClient a
 > little lacking in functionality.  I might suggest using
 > httpunit (http://httpunit.sourceforge.net) instead.  It
 > works well with jython, and has extremely powerful methods
 > for handling links, posts, gets, etc.  
 > 
 > It uses nekohtml to parse malformed HTML documents into
 > valid XML then exposes a useful DOM based on these results.
 > 
 > It also handles HTTPS connections, forms, links and other
 > useful things in an easy to use easy to understand
 > manner, (no more NVPAIRS or regex's, or patching HTTPClient!).
 > 
 > ...

OK, this amounts to a campaign against HTTPClient!


Reasons for HTTPClient:

	- Its solid, (and not 'alpha' which is the case for
	  HttpClient).
	- Its small and comprehensible.
	- It is efficient.
	- Its extremely well written.
	- Its the incumbent.

Reasons for Commons HttpClient:

	- Its actively maintained.
	- It is more modular.
	- It is richer.

Reasons for HttpUnit:
	- nekohtml, parsing support

I prefer HttpClient, HTTPClient over HttpUnit for The Grinder as they
are "closer to the wire".

Specific responses to Justin:

 >(no more NVPAIRS

NameValuePair = NVPair # More readable alias

 > or regex's,

But they're lovely!

 > or patching HTTPClient!

In the next beta I'll supply HTTPClient pre-patched for JSSE.


On balance, yes HttpClient looks good and we should use it if it
proves to be efficient. I'll add it to the TODO, but its a significant
change => low priority.

We perhaps need to look more closely at parsing support for
functional assertions, but I don't want to lose The Grinder's
efficiency here. 


* Build

Incorporate checkstyle.
 Compliant packages:
	net.grinder
	net.grinder.common
	net.grinder.console.model
	net.grinder.engine
	net.grinder.engine.agent
	net.grinder.engine.process
	net.grinder.script
	net.grinder.statistics

* Documentation

HTTP plug-in.

Document G2 adapter.

Feature matrix.

** Examples

HTTPS.

Basic authentication.


