
ARGHH

Crisis:
	How to make script simple, but efficient.
	Probably need to split into lifecycle events.
	This probably means distching BSF and going pure Jython.


New notes
*********
*******

HTTPPlugin:
	String bean
	OK strings
	HttpURLConnection support


Thought
*******

Is ditching grinder.properties defined tests sensible? Yes. Don't want
dual maintenance. Cost is everyone needs jython.




Old/G2
******

[If anyone wants to pick something of this wish list, I prefer unified
diff patches. Mail them to grinder-development@lists.sourceforge.net.
The wish list is part of the distribution, I'll accept patches against
it too :-). The list is roughly in priority order.]


Separate out a PluginProcessContextImplementation? And for
ThreadContext?

Try to get rid of StringBeans...

When HTTPTest etc know about the plugin, where do the lifecycle (begin
run etc) callbacks go? To all known plugins? Probably. How important
is the plugin lifecycle? Can plugins become libraries for HTTPTest etc
to use? Hmmm.. thread callbacks seem important.

Abstract out a TestScheduler interface to allow other algorithms. Add
a "random order" algorithm, which might work well with the JUnit
plugin. Flesh out the API so custom script schedulers can be
supported.

Use the console to broadcast scripts to grinder processes. XML
containing embedded script.

Code clean up:
	- All files should use DOS format.
	- Consider checkstyle

  Find out how to stop net.grinder.console.swing.TestGraph from
  preventing parent process from detecting exit status. (For example,
  when used with the JUnit plugin). Surely System.exit() is not the
  answer?

  Convert docs to xml and xslt->html.

  Add an assertion for the expected status code to the HTTP plugin.
  HTTP Plugin "not ok".

  Change TCP sniffer filters to a stream oriented model. This should
  cure another one of the TCPSniffer/HTTPPlugin bug when recording
  large outputs with posts? Also, consider having a filter instance
  pair per connection.

  TCPSniffer and HTTP plugin should be able to work through proxies.

  Update HTTPClient to support "mean time to first byte".

  Write more JUnit tests.

  Measure test variance. This would involve the console broadcasting
  the total mean, and then listening for the reported variance.

  Tests show that, at least with the NT IP stack, it is quite possible
  to overflow the multicast buffering and hence lose messages. We
  detect this condition and raise error messages, so this doesn't
  concern me from the "correctness perspective", but the communication
  to the console should be changed to be unicast.

  Minor fixes to build.xml:
	Fix the permissions in the distribution files.
	
  Alter console and engine to use Timer.scheduleAtFixedRate for more
  accuracy.

  The HTTPClient plugin implementation interprets basicAuthentication
  properties wrongly. It first sends a request without the
  authentication headers, then catches the 401 and automatically
  resends a request with the authentication headers.

  Tidy up logging of plugin initialisation.

