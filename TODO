-*- mode:outline; minor-mode:outl-mouse -*-

If anyone wants to pick something off this wish list, let me know
first. There are instructions on how to contribute at
http://grinder.sourceforge.net/development/contributing.html.

The wish list is part of the distribution, I'll accept patches against
it too :-).

- Phil


* Bugs

** Console/agent

Each time L&F changes, the saveAs dialog gets another All Files
filter!

** TCPProxy

Should listen on all interfaces if -localhost is not specified.

Fix the proxy to record Authorization again. Can use connection ID.
The G2 HTTPClient plugin implementation interprets basicAuthentication
properties wrongly. It first sends a request without the
authentication headers, then catches the 401 and automatically resends
a request with the authentication headers.

** Script Distribution

*** Model

Agent process to manage file cache. (Need files as Jython can't have
python path into memory). Agent is responsible for local file store
below a directory based on the agent name.

File cache should be up to date with directory structure below
directory chosen by console. The root directory is part of python
path.

**** Tasks

***** Release 1 (done)

Task: Agent receives asynchronously.
Task: Console to broadcast. Remove ScriptDistributionFiles work. 
Task: Allow editing in the console.
Task: DistributeFilesMessage -> DistributeFileMessage (send a single
file). Send in a background thread with a progress bar.      
Task: Console to maintain map of remote agent address to last update
time. For now assume that agent cache should be overwritten. For now,
find the oldest time and broadcast since then. Null -> send the lot.
Task: Console to clear cache state on root change -> broadcast full
cache on distribution. Need a special "clear cache" message.
Task: Console to allow selection of script. Warn on distribution if no
script selected.
Task: Agent to receive selection of script.
Task: Agent FileStore to update copy of cache asynchronously. Main
agent thread to move it into place at good point in lifecycle to
prevent locking of stale files by worker processes.
Task: Agent shouldn't create filestore directory until necessary.
Task: Setting a new directory should require agents to refresh their
cache.

***** Release 2a

Task: File Store directory should have a README describing what its
for.
Task: Guard against distributing agent cache directory. Can mark with
a special file - maybe the README? Also prevent distribution of
temporary files, CVS directories, grinder log files.

***** Release 2b

Task: Console to indicate dirty state.
	Where should this be stored?

	Should be reset when:
		File distribution completes, unless buffer modified in
		meantime.

	Should be set when:
		Buffer modified

	-> calculate from distribution status. But DistributionStatus
	is package scoped?

Task: Console to check dirty state on play and auto broadcast. Need
some way of synchronising before starting run.
Task: Console to watch local file system for edits. 
Task: Add warning if saving outside of distribution.
Task: The agent should pick up secondary grinder.properties from file
cache.

***** Release 3

Task: Addressed messaging. Every Acceptor.SocketResource to know its
remote EndPoint. Add FilteredFanOutServerSender (Extend
FanOutServerSender, allow resourceToOutputStream to return null
indicating the resource shouldn't be sent anything. Supplied Filter
method is given a SocketResource and the Message and can then veto.)
Task: Add agent initiation channel so agent can send a checksum across
file names/sizes. Console compares with its cache and generates a good
last update time for the agent. Thus agents starting with a good cache
skip sync.
Task: Distribution file filter should be dynamically settable.

** Console

*** Refactoring

Consider moving overwrite / save before close / ... handling to the
model. Needs some kind of command pattern to represent choices.

*** Add log panel

Report log messages that currently go to terminal, plus start, stop
test runs etc. Logs should be timestamped. Use log to replace use of
System.err for warnings.

*** Future editor features

Crtl-S -> save.
Revert file.
Status bar.
Undo.
Copy and Paste menu items.
File tree popup menu.

Allow grinder properties to be set remotely.
 - This could just be another view in the editor?

**** jEdit

Replace jEdit-syntax with new jEdit syntax package when available, if
its license terms are acceptable. Apparently now available.

    Clause 2b:

    b) You must cause any work that you distribute or publish, that in
    whole or in part contains or is derived from the Program or any
    part thereof, to be licensed as a whole at no charge to all third
    parties under the terms of this License.


    10. If you wish to incorporate parts of the Program into other
    free programs whose distribution conditions are different, write
    to the author to ask for permission. For software which is
    copyrighted by the Free Software Foundation, write to the Free
    Software Foundation; we sometimes make exceptions for this. Our
    decision will be guided by the two goals of preserving the free
    status of all derivatives of our free software and of promoting
    the sharing and reuse of software generally.

** Engine

There should be an ExternalFilenameFactory, cf ExternalLogger.

Consider having the agent pass the properties in
InitialiseGrinderMessage.

** Statistics
*** Measure variance (Ambitious)

Measure test variance. This would involve the console broadcasting the
total mean, and then listening for the reported variance.

*** Separate out console statistics views from summary statistics views

Needed for custom statistics that use 'period' so are valid in the
console but not in the process logs.

** TCPProxy

Tim McNerney writes:
 > Obviously, I could edit the scripts by hand. But I'd like to have
 > TCPProxy do this for me. So is there some existing method for doing
 > such filtering? Say on target suffix ("filter=.gif,.js,.css")

Change TCPProxy filters to a stream oriented model. This should cure
another one of the TCPSniffer/HTTPPlugin bug when recording large
outputs with posts? Also, consider having a filter instance pair per
connection.

HTTP proxy mode exception handling should send nice HTTP messages to
the client.

** HTTP Plugin

Remove ParseException, ProtocolNotSuppException from public APIs.

Script support for HTTP "system property" options.

Pablo Estades Fernández says:
 > I need to use client cert on TCPProxy to be able to
 > record the test case but also I need to configure
 > grinder workers to run the test case presenting a
 > client cert. 

** Scripting

Consider forcing TestRunner to be registered with grinder.

The Grinder should have error handling for attempts to call the
ScriptStatistics report() or delayStatistics() methods from within
wrapped code.

Wrapped code should be able to use the ScriptStatistics interface and
not have the settings overrwritten by the engine.

Add per-run statistics. This would also allow number of aborted runs
to be recorded.

Script access to global statistics.

*** Events
Idea from Nurul Choudhury:
 > Event counting - The Jython code can create a named event and fire
 > the event when some condition was met. When the console polls for
 > statistics the events and their count would be sent to the console.

*** Error reporting

 > It would be possible for certain classes of error (AttributeError
 > being a good example) to spew out just
 > 
 >       Unknown attribute GETx at "http.py", line 9 in __call__.
 > 
 > Is this what you're after?
^^ To do this, might have to behave differently with 1 thread vs many.

** Reports

Perhaps JasperReports?

** Code

Review use of Kernel. Probably want to share them.

Remove ThreadLocal from RegisteredPlugin.

Figure out the UndeclaredThrowableException problem in
TestRegisteredPlugin.

Review use of InterruptedException

Shouldn't really throw GrinderException anywhere.

** Other HTTP/HTML libraries

DeSouza, Edwin writes:
 > Instead of using:
 > http://www.innovation.ch/java/HTTPClient/index.html
 > <http://www.innovation.ch/java/HTTPClient/FAQ.html> 
 >  
 > How about using Jakarta Commons HttpClient (more popular and Apache
 > License):
 > http://jakarta.apache.org/commons/httpclient/index.html


Justin Spears writes:
 > I am new to grinder, however I found the built in HTTPClient a
 > little lacking in functionality.  I might suggest using
 > httpunit (http://httpunit.sourceforge.net) instead.  It
 > works well with jython, and has extremely powerful methods
 > for handling links, posts, gets, etc.  
 > 
 > It uses nekohtml to parse malformed HTML documents into
 > valid XML then exposes a useful DOM based on these results.
 > 
 > It also handles HTTPS connections, forms, links and other
 > useful things in an easy to use easy to understand
 > manner, (no more NVPAIRS or regex's, or patching HTTPClient!).
 > 
 > ...

OK, this amounts to a campaign against HTTPClient!


Reasons for HTTPClient:

	- Its solid, (and not 'alpha' which is the case for
	  HttpClient).
	- Its small and comprehensible.
	- It is efficient.
	- Its extremely well written.
	- Its the incumbent.

Reasons for Commons HttpClient:

	- Its actively maintained.
	- It is more modular.
	- It is richer.

Reasons for HttpUnit:
	- nekohtml, parsing support

I prefer HttpClient, HTTPClient over HttpUnit for The Grinder as they
are "closer to the wire".

Specific responses to Justin:

 >(no more NVPAIRS

NameValuePair = NVPair # More readable alias

 > or regex's,

But they're lovely!

 > or patching HTTPClient!

In the next beta I'll supply HTTPClient pre-patched for JSSE.


On balance, yes HttpClient looks good and we should use it if it
proves to be efficient. I'll add it to the TODO, but its a significant
change => low priority.

We perhaps need to look more closely at parsing support for
functional assertions, but I don't want to lose The Grinder's
efficiency here. 

Also http://www.nogoop.com/product_16.html#compare

* Build

Convert all sources back to unix file encoding so that diff etc. are
happier?

How to build clover reports during full build?
 - currently "with.clover" only works if clover is first thing on
 path, we need to do two "compile", "test" runs with different
 classes.dir.
 - could have with ant-call, modify compile, compile-tests, test
 - better to ant ourself?

Include Clover history?

* Documentation

HTTP plug-in.

Document G2 adapter.

** Examples

HTTPS.

Basic authentication.

** Forrest TODO

Create back links from javadoc

Create menu links to the javadoc

How to include arbitrary HTML (e.g. for poll forms?)
