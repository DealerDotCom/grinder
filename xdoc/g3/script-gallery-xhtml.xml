<?xml version="1.0" encoding="UTF-8"?>

<html>
<body>

<h1>Script Gallery</h1>

<p>This page contains examples of Jython scripts and script snippets
that can be used with The Grinder. To use one of these scripts, you'll
need to set up a <a
href="./properties.html"><code>grinder.properties</code></a>
file.</p>

<p>If you have a script that you would like to like to see to this
page, please send it to <a
href="mailto:grinder-use@lists.sf.net">grinder-use@lists.sf.net</a>.</p>

<toc/>

<hr/>

<h3><a name="hello-world">Hello World</a></h3>

<p class="script-description">A minimal script that tests The Grinder
logging facility. Shows the recommended style for scripts, with a
<code>TestRunner</code> class. An instance of <code>TestRunner</code>
will be created for each thread; this instance can be used to store
thread-specific data.</p>

<blockquote>

<pre>
<span class="keyword">from</span> net.grinder.script <span class="keyword">import</span> Test

log = grinder.logger.output

test1 = Test(1, &quot;<span class="string">Log method</span>&quot;)

<span class="keyword">class</span> <span class="type">TestRunner</span>:
    <span class="keyword">def</span> <span class="function-name">__call__</span>(self):
        logTest = test1.wrap(log)
        logTest(&quot;<span class="string">Hello World</span>&quot;)
</pre>
</blockquote>

<hr/>

<h3><a name="http">Simple HTTP example</a></h3>

<p class="script-description">Shows the retrieval of a single page via
HTTP. The resulting page is written to a uniquely named file in the
<code>log</code> directory.</p>

<blockquote>
<pre>
<span class="keyword">from</span> net.grinder.script <span class="keyword">import</span> Test
<span class="keyword">from</span> net.grinder.plugin.http <span class="keyword">import</span> HTTPRequest

test1 = Test(1, &quot;<span class="string">Request resource</span>&quot;)
request1 = test1.wrap(HTTPRequest())

<span class="keyword">class</span> <span class="type">TestRunner</span>:
    <span class="keyword">def</span> <span class="function-name">__call__</span>(self):
        result = request1.GET(&quot;<span class="string">http://localhost:7001/</span>&quot;)
        writeToFile(result.text)

<span class="keyword">def</span> <span class="function-name">writeToFile</span>(text):
    filename = grinder.getFilenameFactory().createFilename(
        &quot;<span class="string">page</span>&quot;, &quot;<span class="string">-%d.html</span>&quot; % grinder.runNumber)

    file = open(filename, &quot;<span class="string">w</span>&quot;)
    <span class="keyword">print</span> &gt;&gt; file, text
    file.close()
</pre>
</blockquote>

<hr/>

<h3><a name="form">HTTP multipart form submission</a></h3>

<p class="script-description">This script uses the
<code>HTTPClient.Codecs</code> class to post itself to the server as a
multi-part form. Thanks to Marc Gemis.</p>

<blockquote>

    <pre>
<span class="keyword">from</span> net.grinder.script <span class="keyword">import</span> Test
<span class="keyword">from</span> net.grinder.plugin.http <span class="keyword">import</span> HTTPRequest
<span class="keyword">from</span> HTTPClient <span class="keyword">import</span> Codecs, NVPair
<span class="keyword">from</span> jarray <span class="keyword">import</span> zeros

log = grinder.logger.output

test1 = Test(1, &quot;<span class="string">Upload Image</span>&quot;)
request1 = test1.wrap(HTTPRequest(url=&quot;<span class="string">http://localhost:7001/</span>&quot;))

<span class="keyword">class</span> <span class="type">TestRunner</span>:
    <span class="keyword">def</span> <span class="function-name">__call__</span>(self):

        files = ( NVPair(&quot;<span class="string">self</span>&quot;, &quot;<span class="string">form.py</span>&quot;), )
        parameters = ( NVPair(&quot;<span class="string">run number</span>&quot;, str(grinder.runNumber)), )

        headers = zeros(1, NVPair)
        data = Codecs.mpFormDataEncode(parameters, files, headers)
        log(&quot;<span class="string">Content type set to %s</span>&quot; % headers[0].value)

        result = request1.POST(&quot;<span class="string">/upload</span>&quot;, data, headers);
</pre>
</blockquote>

<hr/>

<h3><a name="fba">J2EE form based authentication</a></h3>

<p class="script-description">The J2EE Servlet specification defines a
common model for form based authentication. When unauthenticated users
try to access a protected resource, they are challenged with a logon
page. The logon page contains a form that <code>POST</code>s username
and password fields to a special <code>j_security_check</code>
page.</p>

<blockquote>
<pre>
<span class="keyword">from</span> net.grinder.script <span class="keyword">import</span> Test
<span class="keyword">from</span> net.grinder.plugin.http <span class="keyword">import</span> HTTPRequest
<span class="keyword">from</span> HTTPClient <span class="keyword">import</span> NVPair

log = grinder.logger.output

protectedResourceTest = Test(1, &quot;<span class="string">Request resource</span>&quot;)
authenticationTest = Test(2, &quot;<span class="string">POST to j_security_check</span>&quot;)

<span class="keyword">class</span> <span class="type">TestRunner</span>:
    <span class="keyword">def</span> <span class="function-name">__call__</span>(self):
        request = protectedResourceTest.wrap(
            HTTPRequest(url=&quot;<span class="string">http://localhost:7001/console</span>&quot;))

        result = request.GET()

        result = maybeAuthenticate(result)

        result = request.GET()

<span class="keyword">def</span> <span class="function-name">maybeAuthenticate</span>(lastResult):
    &quot;&quot;&quot;<span class="string">Function that checks the given result and performs J2EE Form
    Based authentication if necessary.</span>&quot;&quot;&quot;

    <span class="keyword">if</span> lastResult.statusCode == 401 \
    <span class="keyword">or</span> lastResult.text.find(&quot;<span class="string">j_security_check</span>&quot;) != -1:
        
        log(&quot;<span class="string">Challenged, authenticating</span>&quot;)

        authenticationFormData = ( NVPair(&quot;<span class="string">j_username</span>&quot;, &quot;<span class="string">weblogic</span>&quot;),
                                   NVPair(&quot;<span class="string">j_password</span>&quot;, &quot;<span class="string">weblogic</span>&quot;),)

        request = authenticationTest.wrap(
            HTTPRequest(url=&quot;<span class="string">%s/j_security_check</span>&quot; % lastResult.originalURI))
            
        <span class="keyword">return</span> request.POST(authenticationFormData)
</pre>
</blockquote>

<hr/>
<h3><a name="scenario">Recording many HTTP interactions as one test</a></h3>

<p class="script-description">This example shows how many HTTP
interactions can be grouped as a single test by wrapping them in a
function.</p>

<blockquote>
<pre>
<span class="keyword">from</span> net.grinder.script <span class="keyword">import</span> Test
<span class="keyword">from</span> net.grinder.plugin.http <span class="keyword">import</span> HTTPRequest
<span class="keyword">from</span> HTTPClient <span class="keyword">import</span> NVPair

log = grinder.logger.output

request = HTTPRequest(url = &quot;<span class="string">http://localhost:7001</span>&quot;)

<span class="keyword">def</span> <span class="function-name">page1</span>():
    request.GET('<span class="string">/console</span>')
    request.GET('<span class="string">/console/login/LoginForm.jsp</span>')
    request.GET('<span class="string">/console/login/bea_logo.gif</span>')

page1Test = Test(1, &quot;<span class="string">First page</span>&quot;).wrap(page1)

<span class="keyword">class</span> <span class="type">TestRunner</span>:
    <span class="keyword">def</span> <span class="function-name">__call__</span>(self):

        page1Test()
</pre>
</blockquote>

<hr/>

<h3><a name="jdbc">Grinding a database with JDBC</a></h3>

<p class="script-description">Some simple database playing with JDBC. </p>

<blockquote>
<pre>
<span class="keyword">from</span> java.sql <span class="keyword">import</span> DriverManager
<span class="keyword">from</span> net.grinder.script <span class="keyword">import</span> Test
<span class="keyword">from</span> oracle.jdbc <span class="keyword">import</span> OracleDriver

log = grinder.logger.output

test1 = Test(1, &quot;<span class="string">Database insert</span>&quot;)
test2 = Test(2, &quot;<span class="string">Database query</span>&quot;)

<span class="comment"># Load the Oracle JDBC driver
</span>DriverManager.registerDriver(OracleDriver());

<span class="keyword">def</span> <span class="function-name">getConnection</span>():
    <span class="keyword">return</span> DriverManager.getConnection(
        &quot;<span class="string">jdbc:oracle:thin:@127.0.0.1:1521:mysid</span>&quot;, &quot;<span class="string">scott</span>&quot;, &quot;<span class="string">tiger</span>&quot;)

<span class="keyword">def</span> <span class="function-name">ensureClosed</span>(object):
    <span class="keyword">try:</span> object.close()
    <span class="keyword">except:</span> <span class="keyword">pass</span>

connection = getConnection()
statement = connection.createStatement()

<span class="keyword">try:</span> statement.execute(&quot;<span class="string">drop table grinder_fun</span>&quot;)
<span class="keyword">except:</span> <span class="keyword">pass</span>

statement.execute(&quot;<span class="string">create table grinder_fun(thread number, run number)</span>&quot;)

ensureClosed(statement)
ensureClosed(connection)
    
<span class="keyword">class</span> <span class="type">TestRunner</span>:
    <span class="keyword">def</span> <span class="function-name">__call__</span>(self):
        connection = None
        statement = None

        <span class="keyword">try:</span>
	    connection = getConnection()
	    statement = connection.createStatement()
            
            testInsert = test1.wrap(statement)
            testInsert.execute(&quot;<span class="string">insert into grinder_fun values(%d, %d)</span>&quot; %
                               (grinder.threadID, grinder.runNumber))

            testQuery = test2.wrap(statement)
            testQuery.execute(&quot;<span class="string">select * from grinder_fun where thread=%d</span>&quot; %
                              grinder.threadID)

	<span class="keyword">finally:</span>
            ensureClosed(statement)
	    ensureClosed(connection)
</pre>
</blockquote>

<hr/>

<h3><a name="ejb">Enterprise Java Beans</a></h3>

<p class="script-description">Exercise a stateful session EJB from the
BEA WebLogic Server 7.0 examples. Before running this example you will need to
add the EJB client classes to your <code>CLASSPATH</code>.</p>

<blockquote>
<pre>
<span class="keyword">from</span> java.lang <span class="keyword">import</span> String
<span class="keyword">from</span> java.util <span class="keyword">import</span> Properties,Random,HashMap
<span class="keyword">from</span> javax.naming <span class="keyword">import</span> Context,InitialContext
<span class="keyword">from</span> net.grinder.script <span class="keyword">import</span> Test
<span class="keyword">from</span> weblogic.jndi <span class="keyword">import</span> WLInitialContextFactory

log = grinder.logger.output

tests = {
    &quot;<span class="string">home</span>&quot; : Test(1, &quot;<span class="string">TraderHome</span>&quot;),
    &quot;<span class="string">trade</span>&quot; : Test(2, &quot;<span class="string">Trader buy/sell</span>&quot;),
    &quot;<span class="string">query</span>&quot; : Test(3, &quot;<span class="string">Trader getBalance</span>&quot;),   
    }

<span class="comment"># Initial context lookup for EJB home.
</span>p = Properties()
p[Context.INITIAL_CONTEXT_FACTORY] = WLInitialContextFactory.name

home = InitialContext(p).lookup(&quot;<span class="string">ejb20-statefulSession-TraderHome</span>&quot;)
homeTest = tests[&quot;<span class="string">home</span>&quot;].wrap(home)

random = Random()

<span class="keyword">class</span> <span class="type">TestRunner</span>:
    <span class="keyword">def</span> <span class="function-name">__call__</span>(self):
        trader = homeTest.create()

        tradeTest = tests[&quot;<span class="string">trade</span>&quot;].wrap(trader)

        stocksToSell = { &quot;<span class="string">BEAS</span>&quot; : 100, &quot;<span class="string">MSFT</span>&quot; : 999 }
        <span class="keyword">for</span> stock, amount <span class="keyword">in</span> stocksToSell.items():
            tradeResult = tradeTest.sell(&quot;<span class="string">John</span>&quot;, stock, amount)
            log(&quot;<span class="string">Result of tradeTest.sell(): %s</span>&quot; % tradeResult)

        grinder.sleep(100)              <span class="comment"># Idle a while
</span>
        stocksToBuy = { &quot;<span class="string">BEAS</span>&quot; : abs(random.nextInt()) % 1000 }
        <span class="keyword">for</span> stock, amount <span class="keyword">in</span> stocksToBuy.items():
            tradeResult = tradeTest.buy(&quot;<span class="string">Phil</span>&quot;, stock, amount)
            log(&quot;<span class="string">Result of tradeTest.buy(): %s</span>&quot; % tradeResult)            

        queryTest = tests[&quot;<span class="string">query</span>&quot;].wrap(trader)
        balance = queryTest.getBalance();
        log(&quot;<span class="string">Balance is $%.2f</span>&quot; % balance)

        trader.remove()                 <span class="comment"># We don't record the remove() as a test
</span>
        <span class="comment"># Can obtain information about the thread context...
</span>        <span class="keyword">if</span> grinder.threadID == 0 <span class="keyword">and</span> grinder.runNumber == 0:
            <span class="comment"># ...and navigate from the proxy back to the test
</span>            d = queryTest.__test__
            log(&quot;<span class="string">Query test is test %d, (%s)</span>&quot; % (d.number, d.description))            
</pre>
</blockquote>

<hr/>

<h3><a name="amazon">Simple HTTP Web Service</a></h3>

<p class="script-description">Call an Amazon.com web service to obtain
information about a book. To run this script you must install the
standard Python <code>xml</code> module. Here's one way to do that:

<ol class="script-description">

<li>Download and install Jython 2.1</li>

<li>Add the following line to <code>grinder.properties</code>
(changing the path appropriately):
<pre>grinder.jvm.arguments=-Dpython.home=c:/jython-2.1</pre>
</li>

<li>Add Jakarta Xerces (or one of the other parsers supported by the
<code>xml</code> module) to your <code>CLASSPATH</code>.</li>

</ol>
</p>

<p class="script-description">
You will also need to obtain your own Amazon.com web service license
and replace the script text <code>&lt;insert license key
here&gt;</code> with the license key.
</p>

<blockquote>
<pre>
<span class="keyword">from</span> net.grinder.script <span class="keyword">import</span> Test
<span class="keyword">from</span> net.grinder.plugin.http <span class="keyword">import</span> HTTPRequest
<span class="keyword">from</span> HTTPClient <span class="keyword">import</span> NVPair
<span class="keyword">from</span> xml.dom <span class="keyword">import</span> javadom
<span class="keyword">from</span> org.xml.sax <span class="keyword">import</span> InputSource

bookDetailsTest = Test(1, &quot;<span class="string">Get book details from Amazon</span>&quot;)
parser = javadom.XercesDomImplementation()
        
<span class="keyword">class</span> <span class="type">TestRunner</span>:
    <span class="keyword">def</span> <span class="function-name">__call__</span>(self):
        <span class="keyword">if</span> grinder.runNumber &gt; 0 <span class="keyword">or</span> grinder.threadID &gt; 0:
            <span class="keyword">raise</span> RuntimeError(&quot;<span class="string">Use limited to one thread, one run; </span>&quot;
                               &quot;<span class="string">see Amazon Web Services terms and conditions</span>&quot;)
        
        request = bookDetailsTest.wrap(
            HTTPRequest(url=&quot;<span class="string">http://xml.amazon.com/onca/xml</span>&quot;))

        parameters = (
            NVPair(&quot;<span class="string">v</span>&quot;, &quot;<span class="string">1.0</span>&quot;),
            NVPair(&quot;<span class="string">f</span>&quot;, &quot;<span class="string">xml</span>&quot;),
            NVPair(&quot;<span class="string">t</span>&quot;, &quot;<span class="string">webservices-20</span>&quot;),
            NVPair(&quot;<span class="string">dev-t</span>&quot;, &quot;<span class="string">&lt;insert license key here&gt;</span>&quot;),
            NVPair(&quot;<span class="string">type</span>&quot;, &quot;<span class="string">heavy</span>&quot;),
            NVPair(&quot;<span class="string">AsinSearch</span>&quot;, &quot;<span class="string">1904284000</span>&quot;),
            )
        
        bytes = request.POST(parameters).inputStream

        <span class="comment"># Parse results
</span>        document = parser.buildDocumentUrl(InputSource(bytes))

        result = {}
        
        <span class="keyword">for</span> details <span class="keyword">in</span> document.getElementsByTagName(&quot;<span class="string">Details</span>&quot;):
            <span class="keyword">for</span> detailName <span class="keyword">in</span> (&quot;<span class="string">ProductName</span>&quot;, &quot;<span class="string">SalesRank</span>&quot;, &quot;<span class="string">ListPrice</span>&quot;):
                result[detailName] = details.getElementsByTagName(
                    detailName)[0].firstChild.nodeValue

        grinder.logger.output(str(result))
</pre>
</blockquote>

<hr/>

<h3><a name="jaxrpc">JAX-RPC Web Service</a></h3>

<p class="script-description">Exercise a basic Web Service from the
BEA WebLogic Server 7.0 examples. Before running this example you will
need to add the generated JAX-RPC client classes and
<code>webserviceclient.jar</code> to your <code>CLASSPATH</code>.</p>

<blockquote>
<pre>
<span class="keyword">from</span> net.grinder.script <span class="keyword">import</span> Test
<span class="keyword">from</span> examples.webservices.basic.javaclass <span class="keyword">import</span> HelloWorld_Impl
<span class="keyword">from</span> java.lang <span class="keyword">import</span> System

System.setProperty( &quot;<span class="string">javax.xml.rpc.ServiceFactory</span>&quot;,
 &quot;<span class="string">weblogic.webservice.core.rpc.ServiceFactoryImpl</span>&quot;);

webService = HelloWorld_Impl(&quot;<span class="string">http://localhost:7001/basic_javaclass/HelloWorld?WSDL</span>&quot;);

port  = webService.getHelloWorldPort();
portTest = Test(1, &quot;<span class="string">JAXP Port test</span>&quot;).wrap(port)

<span class="keyword">class</span> <span class="type">TestRunner</span>:
    <span class="keyword">def</span> <span class="function-name">__call__</span>(self):
        result = portTest.sayHello(grinder.threadID, grinder.grinderID);
        grinder.logger.output(&quot;<span class="string">Got '%s'</span>&quot; % result);
</pre>
</blockquote>

<hr/>

<h3><a name="hello-world-functions">Hello World, with functions</a></h3>

<p class="script-description">The <a href="#hello-world">Hello
World</a> example re-written using functions.</p>

<blockquote>
<pre>
<span class="keyword">from</span> net.grinder.script <span class="keyword">import</span> Test

log = grinder.logger.output

test1 = Test(1, &quot;<span class="string">Log method</span>&quot;)

<span class="keyword">def</span> <span class="function-name">doRun</span>():
    logTest = test1.wrap(log)
    logTest(&quot;<span class="string">Hello World</span>&quot;)

<span class="keyword">def</span> <span class="function-name">TestRunner</span>():
    <span class="keyword">return</span> doRun
</pre>
</blockquote>

<hr/>

<h3><a name="jms">Java Message Service</a></h3>

<p class="script-description">To be written.</p>

</body>
</html>
