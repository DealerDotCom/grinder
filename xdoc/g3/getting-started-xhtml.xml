<?xml version="1.0" encoding="UTF-8"?>

<html>
<body>

<h1>Getting Started</h1>

<p><em>This page takes a top down approach to The Grinder. If you are
happy figuring things out for yourself and want to get your hands
dirty, you might like to read <a href="#howtostart">How do I start The
Grinder</a> and then jump to the <a
href="./script-gallery.html">Script Gallery</a>.</em></p>

<h2>The Grinder processes</h2>

<p>The Grinder is a framework for running test scripts across a number
of machines. The framework is comprised of three types of
<em>process</em> (or program). <em>Worker processes</em>, <em>agent
processes</em> and the <em><a href="./console.html">console</a></em>. The responsibilities of each
of the process types are:</p>

<ul>
  <li><strong>Worker processes</strong>
    <ul>
      <li>Interpret Jython test scripts and performs tests using a number of <em>worker threads</em></li>
    </ul>
    <p/>
  </li>
  <li><strong>Agent processes</strong>
    <ul>
      <li>Manage worker processes</li>
      <li>A single agent process runs on each client machine</li>
    </ul>
    <p/>
  </li>
  <li><strong>The console</strong>
    <ul>
      <li>Coordinates the other processes</li>
      <li>Collates and displays statistics</li>
    </ul>
    <p/>
  </li>
</ul>
<p>As The Grinder is written in Java, each of these processes is a
Java Virtual Machine (JVM).</p>

<p>For heavy duty testing, you start an agent process on each of
several client machines. The worker processes they launch can be
controlled and monitored using the console. There is little reason to
run more than one agent on a single machine, but if you can if you
wish.</p>

<h2>Tests and test scripts</h2>

<p>A <em>test</em> is a unit of work against which statistics are
recorded. Users specify which tests to run using a Jython <a
href="./scripts.html">test script</a>. Tests are uniquely defined by a
<em>test number</em> and may also have a <em>description</em>. If you
wish your scripts can report many different actions (e.g. different
web page requests) against the same test, The Grinder will aggregate
the results.</p>

<p>The script is executed many times in a typical testing scenario.
Each worker process has a number of worker threads, and each worker
thread calls the script a number of times. A single execution of a
test script is called a <em>run</em>.</p>

<h2><a name="howtostart">How do I start The Grinder?</a></h2>

<p>Its easy:</p>

<ol>

<li>Create a <a href="#properties"><code>grinder.properties</code></a>
file. This file specifies general control information (how the worker
processes should contact the console, how many worker processes to
use, ..), as well as the name of the Jython script that will be used
to run the tests.<p/></li>

<li>Set your <code>CLASSPATH</code> to include the
<code>grinder.jar</code> file which can be found in the
<code>lib</code> directory.<p/></li>

<li>Start the console on one of the test machines:

<blockquote><pre>
java net.grinder.Console
</pre></blockquote>
</li>

<li>For each test machine, do steps 1. and 2. and start an agent
process:
<blockquote><pre>
java net.grinder.Grinder
</pre></blockquote>

<p>You can also specify an explicit properties file as the first
argument. For example:
<blockquote><pre>
java net.grinder.Grinder myproperties
</pre></blockquote>
</p>
</li>
</ol>

<p>The console does not read the <code>grinder.properties</code> file.
It has its own options dialog (choose the <em>File/Options</em> menu
option) which you should use to set the communication addresses and
ports to match those in the <code>grinder.properties</code> files. The
<a href="console.html#process-controls">console controls</a> can be
used to trigger The Grinder test scenario. Each agent process then
creates child worker processes to do the work.</p>

<p>As the worker processes execute they dynamically inform the console
of the tests in the test script. If you start the console after the
agent process, you should press the <em>Reset processes</em> button.
This will cause the existing worker processes to exit and the agent
process to start fresh worker processes which will update the console
with the new test information.</p>

<span class="sidebar">
<h3>Network addresses</h3>

<p>The worker processes listen for console signals on a multicast
address, by default this is <code>228.1.1.1:1235</code>. Each worker
process sets up a TCP network connection to the console to report
statistics. By default, the console listens on port <code>6372</code>
on all local network interfaces of the machine running the
console.</p>

<p>If the default addresses are not valid, alter following properties
in the <code>grinder.properties</code> file before starting The
Grinder agents:</p>

<pre>
        <a href="#grinder.consoleAddress">grinder.consoleAddress</a>  (Address of machine running console)
        <a href="#grinder.consolePort">grinder.consolePort</a>
        <a href="#grinder.grinderAddress">grinder.grinderAddress</a>  (Multicast address)
        <a href="#grinder.grinderPort">grinder.grinderPort</a>
</pre>
</span>

<p>If multicast is not available, or you want to quickly try a test
script without bothering with the console, use the <a
href="#grinder.reportToConsole">grinder.reportToConsole</a> and <a
href="#grinder.receiveConsoleSignals">grinder.receiveConsoleSignals</a>
properties to disable console communication.</p>

<h2>Output</h2>

<p>Each worker process writes logging information to a file called
<code>out-<em>host</em>-<em>n</em>.log</code>, where
<code><em>host</em></code> is the machine host name and
<code><em>n</em></code> is the worker process number. Errors are
written to <code>error-<em>host</em>-<em>n</em>.log</code>. If no
errors occur, an error file will not be created. Data about individual
test invocations is written into a file called
<code>data-<em>host</em>-<em>n</em>.log</code> that can be imported
into a spreadsheet tool such as Microsoft Excel&#8482; for further
analysis.</p>

<p>The final statistics summary (in the <code>out-*</code> files of
each process) looks something like this:</p>

<blockquote>
<pre>
Final statistics for this process:

              Successful
              Transactions  Errors        Average (ms)  
Test 0        25            0             255.52        
Test 1        25            0             213.40        
Test 2        25            0             156.80         "Image"
Test 3        25            0             90.48         
Test 4        25            0             228.68         "Login page"
Test 5        25            0             86.12          "Security check"
Test 6        25            0             216.20        
Test 7        25            0             73.20         
Test 8        25            0             141.92        
Test 9        25            0             104.68         "Logout page"

Totals        250           0             156.70     
</pre>
</blockquote>

<p>The console has a dynamic display of similar information collected
from all the worker processes.</p>

<p>Each test has one of two possible outcomes:</p>

<ol>
<li>Success. The number of <em>Successful Transactions</em> for that
test is incremented The time taken to perform the test is added to the
<em>Total</em>.</li>

<li>Error. The execution of a test raised an exception. The number of
<em>Errors</em> for the test is incremented.</li>
</ol>

<p>The <em>Total</em> and <em>Average</em> figures are calculated based only on
successful transactions.</p>

<h2><a name="properties">The properties file</a></h2>

<p>The Grinder worker and agent processes are controlled by setting
properties in the <code>grinder.properties</code> file.</p>

<p>All properties have default values. If you start The Grinder agent
process without a <code>grinder.properties</code> file it will
communicate with the console using default addresses, use one worker
process, one thread, and make one run through the test script found in
the file <code>grinder.py</code>. This is not much use, so read
on...</p>

<h3>Table of properties</h3>

<p>This table lists the properties understood by The Grinder
engine.</p>

<blockquote>
<table>
 <tr>
  <td valign="top"><code><a name="grinder.processes">grinder.processes</a></code></td>
  <td>The number of worker processes to start. Default is 1.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.threads">grinder.threads</a></code></td>
  <td>The number of worker threads that each worker process spawns.
  Default is 1.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.runs">grinder.runs</a></code></td>
  <td>The number of runs of the test script each thread performs. 0
  means "run forever", and should be used when you are using the
  console to control your test runs. Default is 1.</td>
 </tr>

 <tr>
  <td valign="top"><code><a
  name="grinder.script">grinder.script</a></code></td>
  <td>The file name of the Jython <a href="./scripts.html">script</a>
  to run. Default is <code>grinder.py</code>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.jvm">grinder.jvm</a></code></td>
  <td>Use an alternate JVM for worker processes. Defaults to
  <code>java</code> so you do not need to specify this if your
  <code>PATH</code> is sensible.</td>
 </tr>

 <tr>
  <td valign="top"><code><a
  name="grinder.jvm.classpath">grinder.jvm.classpath</a></code></td>
  <td>Use to adjust the classpath used for the worker process JVMs.
  Anything specified here will be prepended to the classpath used to
  start the Grinder processes.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.jvm.arguments">grinder.jvm.arguments</a></code></td>
  <td>Additional arguments to worker process JVMs.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.logDirectory">grinder.logDirectory</a></code></td>
  <td>Directory to write log files to. Created if it doesn't already
  exist. Default is the local directory.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.appendLog">grinder.appendLog</a></code></td>
  <td> Append to, rather than overwrite, existing log files. Default
  is <code>false</code>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.hostID">grinder.hostID</a></code></td>
  <td>Override the "host" string used in log filenames and logs.
  Defaults to the host name.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.receiveConsoleSignals">grinder.receiveConsoleSignals</a></code></td>
  <td>Set to <code>true</code> to respond to console signals. Default is
  <code>true</code>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.reportToConsole">grinder.reportToConsole</a></code></td>
  <td>Set to <code>true</code> to send statistics to the console.
  Default is <code>true</code>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.consoleAddress">grinder.consoleAddress</a></code></td>
  <td>The IP address or hostname to use for communication from the
  Grinder processes to the console. Default is all the network
  interfaces of the local machine.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.consolePort">grinder.consolePort</a></code></td>
  <td> The IP port to use for communication from the Grinder processes
  to the console. Default is <code>6372</code>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.grinderAddress">grinder.grinderAddress</a></code></td>
  <td>The multicast address to use for communication from the console
  to the agent and worker processes. See <a href="faq.html#multicast">What do
  I need to do to set up multicast?</a>. Default is
  <code>228.1.1.1</code>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.grinderPort">grinder.grinderPort</a></code></td>
  <td>The multicast port to use for communication from the console to
  the agent and worker processes. Default is <code>1234</code>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.reportToConsole.interval">grinder.reportToConsole.interval</a></code></td>
  <td>The period at which each process sends updates to the console.
  This also controls the frequency at which the data files are
  flushed. Default is 500 ms.</td>
 </tr>

 <tr>
  <td valign="top"><code><a
  name="grinder.initialSleepTime">grinder.initialSleepTime</a></code></td>
  <td> The maximum time in milliseconds that each thread waits before
  starting. Unlike the sleep times specified in scripts, this is
  varied according to a flat random distribution. The actual sleep
  time will be a random value between 0 and the specified value.
  Affected by <code>grinder.sleepTimeFactor</code>, but not
  <code>grinder.sleepTimeVariation</code>. Default is 0 ms.</td>
 </tr>

 <tr>
  <td valign="top"><code><a
  name="grinder.sleepTimeFactor">grinder.sleepTimeFactor</a></code></td>
  <td> Apply a factor to all the sleep times you've specified, either
  through a property of in a script. Setting this to <code>0.1</code>
  would run the script ten times as fast. Default is <code>1</code>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a
  name="grinder.sleepTimeVariation">grinder.sleepTimeVariation</a></code></td>
  <td>The Grinder varies the sleep times specified in scripts
  according to a Normal distribution. This property specifies a
  fractional range within which nearly all (99.75%) of the times will
  lie. E.g., if the sleep time is specified as 1000 and the
  sleepTimeVariation is set to <code>0.1</code>, then 99.75% of the
  actual sleep times will be between 990 and 1100 milliseconds.
  Default is <code>0.2</code>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.logProcessStreams">grinder.logProcessStreams</a></code></td>
  <td>Set to <code>false</code> to disable the logging of output and
  error steams for worker processes. You might want to use this to
  reduce the overhead of running a client thread. Default is
  <code>true</code>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.recordTime">grinder.recordTime</a></code></td>
  <td>Set to <code>false</code> to disable reporting of <a
  href="../development/timing.html">timing information</a>; other
  statistics are still reported. Default is <code>true</code>.</td>
 </tr>

</table>
</blockquote>
</body>
</html>
