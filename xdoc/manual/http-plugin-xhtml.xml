<?xml version="1.0" encoding="UTF-8"?>

<html>
<head>
<style type="text/css">
    <!--
      body {
        color: #000000;
        background-color: #ffffff;
      } /* default */
      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
      .keyword {
        color: #ff0000;
        background-color: #ffffff;
      } /* font-lock-keyword-face */
      .function-name {
        color: #ff0000;
        background-color: #ffffff;
      } /* font-lock-function-name-face */
      .jde-java-font-lock-package {
        color: #0000cd;
        background-color: #ffffff;
      } /* jde-java-font-lock-package-face */
      .comment {
        color: #00008b;
        background-color: #ffffff;
      } /* font-lock-comment-face */
      .variable-name {
        color: #8b008b;
        background-color: #ffffff;
      } /* font-lock-variable-name-face */
      .type {
        color: #4682b4;
        background-color: #ffffff;
      } /* font-lock-type-face */
      .jde-java-font-lock-modifier {
        color: #da70d6;
        background-color: #ffffff;
      } /* jde-java-font-lock-modifier-face */
    -->
</style>
</head>
<body>

<h1>The HTTP Plug-in</h1>

<h3>HTTP plug-in class</h3>

<p>To use the HTTP plug-in, specify:</p>

<blockquote>
<pre>grinder.plugin=net.grinder.plugin.http.HttpPlugin</pre>
</blockquote>

<h3>HTTP plug-in properties</h3>

<p>This table lists the HTTP plug-in properties that you can set in
<code>grinder.properties</code> in addition to the <a href="properties.html">core properties</a>. You can use the TCPSniffer to <a href="tcpsniffer.html#HttpPluginSnifferFilter">record</a> HTTP plug-in scripts.</p>

<blockquote>
<table>
 <tr>
  <td valign="top"><code><a
  name="grinder.test0.parameter.url">grinder.test0.parameter.url</a></code></td>
  <td>The URL to call. The HTTP <code>GET</code> method is used unless
  <a
  href="#grinder.test0.parameter.post">grinder.test0.parameter.post</a>
  is specified. The contents of the file can be varied using a <a
  href="#string-bean">string bean</a>, see this <a
  href="file:///e:/src/grinder3/doc/manual/faq.html#post-and-string-beans">FAQ</a>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a
  name="grinder.test0.parameter.post">grinder.test0.parameter.post</a></code></td>
  <td>Specify a file containing <code>POST</code> data to send. The
  value can be varied using a <a href="#string-bean">string
  bean</a>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a
  name="grinder.test0.parameter.header">grinder.test0.parameter.header.<em>name</em></a></code></td>
  <td>(Where <em>name</em> can be an arbitrary string). Add a
  <code><em>name:</em></code> header to the request with the specified
  value. The value can be varied using a <a href="#string-bean">string
  bean</a>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.plugin.parameter.stringBean">grinder.plugin.parameter.stringBean</a></code></td>
  <td>Fully qualified class name of a Java bean that can generate
  dynamic strings. See <a href="#string-bean">What's a String
  Bean?</a>. </td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.test0.parameter.ok">grinder.test0.parameter.ok</a></code></td>
  <td>Fail if the returned page doesn't contain this string. The value
  can be varied using a <a href="#string-bean">string bean</a>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.test0.parameter.basicAuthenticationRealm">grinder.test0.parameter.basicAuthenticationRealm</a></code><br/>
      <code><a name="grinder.test0.parameter.basicAuthenticationUser">grinder.test0.parameter.basicAuthenticationUser</a></code><br/>
      <code><a name="grinder.test0.parameter.basicAuthenticationPassword">grinder.test0.parameter.basicAuthenticationPassword</a></code><br/>
  </td>
  <td>Used together, these specify an HTTP BASIC authentication header
      that will be sent with the request. If you specify one of these
      values, you must specify all three.

      <p>Note, the default <a href="#HTTPClient">HTTPClient
      implementation</a> only sends this if challenged by the server,
      as a browser would, and the specified basicAuthenticationRealm
      must match the realm required by the WWW-Authenticate header in
      the challenge. The values can be varied using a <a
      href="#string-bean">string bean</a>.</p>
  </td>
 </tr>

 <tr>
  <td valign="top"><code><a
  name="grinder.plugin.parameter.useCookies">grinder.plugin.parameter.useCookies</a></code></td>
  <td>Set to <code>false</code> to disable cookie handling (it
  defaults to <code>true</code>).</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.plugin.parameter.disablePersistentConnections">grinder.plugin.parameter.disablePersistentConnections</a></code></td>
  <td>Set to <code>true</code> to send a <code>Connection:
  close</code> message with every request. See <a
  href="http://www.innovation.ch/java/HTTPClient/advanced_info.html#pers_con">http://www.innovation.ch/java/HTTPClient/advanced_info.html#pers_con</a>.
  Only works with the default <a href="#HTTPClient">HTTPClient
  implementation</a>. The default is <code>false</code>.</td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.plugin.parameter.followRedirects">grinder.plugin.parameter.followRedirects</a></code></td>
  <td>Set to <code>true</code> to automatically follow redirects, so
  you don't have to have additional URLs in you scripts. The default
  is <code>false</code>. You should always set this to
  <code>false</code> for TCPSniffer generated scripts.

   <p>If you are using WebLogic Server and Web Application form-based
   authentication you leave this property set to false. This is
   because a redirect request that follows authentication contains a
   key cookie - setting the property to <code>true</code> prevents the
   cookie from being picked up by the plug-in.</p>
  </td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.useHTTPClient">grinder.useHTTPClient</a></code></td>

  <td>Controls which of the <a href="#HTTPClient">two different HTTP
  libraries</a> the HTTP plug-in uses. The default value is
  <code>true</code>, meaning that the HTTPClient implementation should
  be used.</td>
 </tr>

</table>
</blockquote>

<h3><a name="string-bean">What's a String Bean?</a></h3>

<p>When using the HTTP plug-in, it is often necessary to parametrise
parts of URLs, POST data, and other request strings. The easy way to
do this is to use a <em>string bean</em> - a Java Bean that returns
<code>String</code>s from its <code>get</code> methods.</p>

<p>For example, suppose you wanted to modify the URL
<code>http://myhost/test.jsp?n=1</code> such that <code>n</code> is
set to a random number each time? Easy! Here's how.</p>

<ol>
<li>
<p>Write a simple bean:</p>

<blockquote>
<pre>
<span class="comment">// MyStringBean.java
</span><span class="keyword">package</span> <span class="jde-java-font-lock-package">mystuff</span>;

<span class="keyword">import</span> <span class="jde-java-font-lock-package">java</span>.<span class="jde-java-font-lock-package">util</span>.<span class="type">Random</span>;

<span class="jde-java-font-lock-modifier">public</span> <span class="keyword">class</span> <span class="function-name">MyStringBean</span> {
  <span class="jde-java-font-lock-modifier">private</span> <span class="type">Random</span> <span class="variable-name">m_random</span> = <span class="keyword">new</span> <span class="type">Random</span>();

  <span class="jde-java-font-lock-modifier">public</span> <span class="type">String</span> <span class="function-name">getRandomInteger</span>() {
    <span class="keyword">return</span> Integer.toString(m_random.nextInt());
  }
}</pre>
</blockquote>
</li>

<li>
<p>Compile this and put it in your <code>CLASSPATH</code>. Then alter
your <code>grinder.properties</code> to include this line:</p>
<blockquote>
<pre>grinder.plugin.parameter.stringBean=mystuff.MyStringBean</pre>
</blockquote>
</li>

<li>
<p>Alter the test URL parameter as follows:</p>

<blockquote>
<pre>grinder.test0.parameter.url=http://myhost/test.jsp?n=&lt;getRandomInteger&gt;</pre>
</blockquote>

</li>
</ol>

<p>The <em><code>&lt;beanMethodName&gt;</code></em> syntax can be used
in URL strings, <code>POST</code> data files, HTTP headers and in OK
strings. It must correspond to a <code>public</code> method of the
string bean that takes no parameters and returns a
<code>String</code>.</p>

<p>The HTTP plug-in is relaxed about a partial string bean tag matches
(for example <code>&lt;notAMethod&gt;</code> or
<code>&lt;abc&lt;def&gt;xyz&gt;</code>); if it can't find a suitable
match it simply outputs the literal text. This allows string bean tags
to be used within XML <code>POST</code> data. If you find that your
string bean is not invoked when you expect it to be, use the <a
href="tcpsniffer.html">TCPSniffer</a> to find out what is actually
being sent and check your spelling.</p>

<p>Each string bean instance is instantiated per thread, and maintains
its state between invocations. If your bean needs additional
information regarding the test life cycle (for example, to reset a
counter and the beginning of a cycle), it can implement the
<code>net.grinder.plugin.http.StringBean</code> interface. See the
examples in <code>net.grinder.plugin.http.example</code>.</p>

<p>Advanced string beans can implement the
<code>net.grinder.plugin.http.StringBean</code> and/or
<code>net.grinder.plugin.http.HTTPClientResponseListener</code>
interfaces to receive callbacks about the test life cycle. See the
examples in <code>src/net/grinder/plugin/http/example</code>.</p>

<h3><a name="HTTPClient">HTTPClient</a></h3>

<p>The HTTP plugin has two implementations. The default implementation
is based on Ronald Tschal&#xE4;r's excellent
<strong>HTTPClient</strong> library. An alternative implementation
which uses the JDK's <code>HttpURLConnection</code> can also be used,
but is deprecated and will be removed from The Grinder in a future
release. If you really want to you can specify that the HTTP plug-in
should use <code>HttpURLConnection</code> instead of HTTPClient:</p>

<blockquote>
<pre>grinder.plugin.parameter.useHTTPClient=false</pre>
</blockquote>

<p>I highly recommend the HTTPClient implementation, see below for some
reasons why. However the HttpURLConnection implementation has two
features that the HTTPClient implementation doesn't. The first feature
is an additional parameter:</p>

<blockquote>
<table>
 <tr>
  <td valign="top"><code><a
  name="grinder.plugin.parameter.useCookiesVersionString">grinder.plugin.parameter.useCookiesVersionString</a></code></td><td>&#160;</td>
  <td>Set to <code>false</code> to remove the <code>$Version</code>
  string from cookies (it defaults to true). This is to work around
  broken (?) JRun 2.3.3. behaviour.</td>
 </tr>
</table>
</blockquote>

<p>The HTTPClient cookie support is damn good, so this probably isn't
an issue. It will be fixed if it turns out to be a problem.</p>

<p>The second additional feature is the reporting of the <em>mean time
to first byte</em> statistic in addition to the normal total
transaction time statistic. This will be supported by the HTTPClient
implementation in a future release.</p>

<h4>HTTPClient versus HttpURLConnection</h4>

<p>HTTPClient has many more features than HttpURLConnection, see <a
href="http://www.innovation.ch/java/HTTPClient/urlcon_vs_httpclient.html">
http://www.innovation.ch/java/HTTPClient/urlcon_vs_httpclient.html</a>
for a comparison. I hope to lever features such as proxy support,
connection timeouts and persistent cookies into future versions of The
Grinder.</p>

<p>You can access many HTTPClient features by setting system
properties. See <a
href="http://www.innovation.ch/java/HTTPClient/advanced_info.html">http://www.innovation.ch/java/HTTPClient/advanced_info.html</a>
for a list of properties. For example, you can force HTTPClient to use
HTTP 1.0 instead of HTTP 1.1 with the following parameter:</p>

<blockquote>
<pre>grinder.jvm.arguments=-DHTTPClient.forceHTTP_1.0=true</pre>
</blockquote>

<p>One of the key advantages for The Grinder is that HTTPClient allows
explicit control of connection management, whereas HttpURLConnection
uses connection pooling "under the covers". Because HTTPClient uses
extra connections, it may appear slower - <a
href="timing.html">particularly if the client and server are
co-hosted</a>. However, its a better model of reality (one cycle
equals one browser session).</p>

<p>In my experience, HTTPClient is <em>much</em> more RFC compliant,
and less buggy than HttpURLConnection.</p>

<h3><a name="https">How do I use HTTPS?</a></h3>

<p><em>Geoff Corey has <a
href="http://www.blackoakassociates.com/pages/463494/index.htm">some
useful comments</a> on this documentation.</em></p>

<p>There are patches available to HTTPClient to work with several
SSL implementations. See
<a
href="http://www.innovation.ch/java/HTTPClient/https.html">http://www.innovation.ch/java/HTTPClient/https.html</a>
for details. The instructions that follow assume you are using JSSE
1.0.2.</p>

<ol>
<li>Install JSSE1.0.2. Follow the instructions in <a
href="http://java.sun.com/products/jsse/INSTALL.html">http://java.sun.com/products/jsse/INSTALL.html</a>.
I recommend installing the JSSE as an installed extension for
simplicity.</li>

<li>Download the HTTPClient JSSE patch from <a
href="http://www.innovation.ch/java/HTTPClient/JSSE.zip">http://www.innovation.ch/java/HTTPClient/JSSE.zip</a></li>

<p>Extract the class files contained within the zip into a directory
called HTTPClient, then create a jar containing that directory:</p>

<blockquote>
<pre>
mkdir HTTPClient; cd HTTPClient 
jar xf /download/JSSE.zip
cd ..
jar cf HTTPClient-JSSE.jar HTTPClient
</pre>
</blockquote>

<p>Add this jar to the <em>start</em> of your <code>CLASSPATH</code>
before running The Grinder. Its worth reading the file README in
JSSE.zip.</p>

<li>You can now use URLs that start with <code>https:</code> in
your <code>grinder.properties</code>.</li>
</ol>

<p>You may well need to create a trust store containing CA
certificates that sign the server certificate. See the JSSE
documentation for full details, here's a quick hint:</p>

<blockquote>
<pre>
keytool -import -v -keystore ./mycastore -file d:/wls5/myserver/ca.pem
</pre>
</blockquote>

<p>You should then add
<code>-Djavax.net.ssl.trustStore=mycastore</code> to
<code>grinder.jvm.arguments</code> in your
<code>grinder.properties</code>. Refer to the JSSE documentation for
other useful properties. In particular
<code>-Djavax.net.debug=ssl</code> might come in useful.</p>

<p>HTTPClient checks that the host name in each request URL matches
the subject DN field in the certificate. If this isn't the case, you
might need to add an entry to <code>/etc/hosts</code>,
<code>c:/WINNT40/system32/drivers/etc/</code>, DNS or whatever, and
then use that hostname in the request URLs.</p>

<p>The JSSE SSL implementation isn't quick. This should be taken
into account when comparing round trip times, as a compiled browser
version is likely to be <em>a lot</em> faster.</p>

<h3>How do I use the HTTPS plug-in? <em>(HttpURLConnection
implementation only)</em></h3>

<em>This information applies to the deprecated HttpURLConnection
implementation. For information on using HTTPS with the default
HTTPClient implementation, see <a href="#https">above</a>.</em>

<ol>
<li>Install JSSE1.0.2 as described above.</li>

<li>In your <code>grinder.properties</code>, use the HttpsPlugin
rather than HttpPlugin:

<blockquote>
<pre>
grinder.plugin=net.grinder.plugin.http.HttpsPlugin
</pre>
</blockquote>
</li>

<li>You can now use URLs that start with <code>https:</code> in your
<code>grinder.properties</code>.</li>

<li>If you want two-way authentication, add the lines like:

<blockquote>
<pre>
grinder.plugin.parameter.clientCert=./philclient.p12
grinder.plugin.parameter.clientCertPassword=acrobat
</pre>
</blockquote>
You can export a P12 certificate from Netscape.
</li>
</ol>
</body>
</html>

