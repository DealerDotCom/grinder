<?xml version="1.0" encoding="UTF-8"?>

<html>
<body>
<h1>The JUnit Plug-in</h1>

<h3>What's it for?</h3>

<p>Why would you want to do use the JUnit plug-in? Three possible
reasons spring to mind:</p>

<ul>
<li><p>To write a simple test case around arbitrary Java code, rather
than creating a new plug-in. This is the recommended way to replace the
functionality of the old <code>TraderEJBPlugin</code> that was
shipped with early versions of The Grinder. (As an added bonus you end
up with some JUnit test cases which you can use to impresses your boss
<em>and</em> bug people with tales of what an extreeeeme ...err..
dooood you are).</p></li>

<li><p>To thrash the heck out of your code in an attempt to discover
race conditions (bugs).</p></li>

<li><p>To investigate the statistical effects of subatomic particles
passing through your hardware.</p></li>
</ul>

<p>Looking for race conditions requires that each instance of the
JUnit tests should run against a common fixture - how to achieve in
general this is left as an exercise. Please send any useful patterns
to <a
href="mailto:grinder-use@lists.sourceforge.net">grinder-use@lists.sourceforge.net</a>.
Additionally, because The Grinder currently runs each test cycle in
the same order, most race conditions will be hidden. The fix for this
is to implement a test scheduler abstraction, see <a
href="../future/future.html">The Future</a>.</p>

<h3>JUnit plug-in class</h3>

<p>To use the <a href="http://junit.sourceforge.net/">JUnit</a> plug-in,
specify:</p>

<blockquote>
<pre>
grinder.plugin=net.grinder.plugin.junit.JUnitPlugin
</pre>
</blockquote>

<h3>JUnit plug-in properties</h3>

<p>This table lists the JUnit plug-in properties that you can set in
<code>grinder.properties</code> in addition to the <a
href="properties.html">core properties</a>.</p>

<blockquote>
<table>
 <tr>
  <td valign="top"><code><a name="grinder.plugin.parameter.testSuite">grinder.plugin.parameter.testSuite</a></code></td>

  <td>The fully qualified name of the JUnit test suite class.

  <p>The class can be anything you can normally pass to a JUnit
  <code>TestRunner</code>. A quick summary: it can either have a
  method, <code>public static junit.framework.Test suite()</code>
  which returns the <code>TestSuite</code> <em>or</em> it can define a
  number of tests methods which will be discovered through
  introspection - the method names must begin with <code>test</code>.
  (Confusingly, it matters not whether the class directly implements
  <code>junit.framework.TestSuite</code>; this is a JUnit thing, so
  take any complaints there).</p></td>
 </tr>

 <tr>
  <td valign="top"><code><a name="grinder.plugin.parameter.logStackTraces">grinder.plugin.parameter.logStackTraces</a></code></td>
  <td>Set to <code>true</code> to produce stack traces for failures
  and errors in the error log. The default is <code>false</code>.</td>
 </tr>
</table>
</blockquote>

<p>The tests to run are automatically sucked out of the test suite
class - you shouldn't specify them individually in
grinder.properties. However, you can tweak with individual tests'
sleep time as normal. For example, if you want to wait a second
before the 6th test in the test suite, you should say</p>

<blockquote>
<pre>
grinder.test5.sleepTime=1000
</pre>
</blockquote>

<p>JUnit has the concept of <em>failures</em> (which occur due to
assertions failing) and <em>errors</em> (which occur when tests throw
exceptions). The Grinder <em>errors</em> count for a test is
incremented by one if the test causes either a failure or an error,
.</p>

</body>
</html>

