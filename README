The Grinder
Copyright (C) 2001 Paco Gómez
Copyright (C) 2001 Philip Aston

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

Please see the file COPYING for details of the General Public License.

This software uses software from the W3C's PICS project. See the file
etc/w3c-liense.html for details of the license.



What is it?
***********

The Grinder is a simple, pure Java load-testing framework released
under the GNU Public License. It was originally developed for the book
"Professional Java 2 Enterprise Edition with BEA WebLogic Server" by
Paco Gómez and Peter Zadrozny.

Test client code is written in the form Java "plug-ins". Sample
plug-ins for testing HTTP services are provided. It is particularly
suitable for testing BEA WebLogic Server based applications.

A JUnit plugin is also supplied. This opens up interesting
possibilities for bake testing Java code to discover race conditions
and other bugs.


Where do I get it?
******************

The Grinder's home is currently at

	http://sourceforge.net/projects/grinder/

There are also some mailing lists you might like to join.


What else do I need?
********************

To run The Grinder:

  JDK 1.3

and optionally:

  JSSE 1.0.2			for SSL support
  HTTPClient                    for HttpPlugin HTTPClient support
  Apache Jakarta Regexp 1.2	for the TCPSniffer HTTP plugin
  Apache Jakarta Ant 1.3	to build The Grinder from source
  JUnit 3.5			to test The Grinder itself


These can be obtained from the following places.

 http://java.sun.com/products/jsse/
 http://www.innovation.ch/java/HTTPClient/
 http://jakarta.apache.org/ant/index.html
 http://jakarta.apache.org/regexp/index.html
 http://sourceforge.net/projects/junit/


How do I build it?
******************

See the instructions in build.xml.


How do I use it?
****************

Its easy:

	1. Set your classpath to include the grinder.jar file in the
	   lib directory.

	2. Change to a test directory, and set up a grinder.properties
	   file which defines the test you want to perform. See the
	   examples directory for inspiration.

	3. Say
		java net.grinder.Grinder

If you want to use the Console, (and you probably do), tweak the
following properties

	grinder.receiveConsoleSignals
	grinder.multicastAddress
	grinder.multicastPort

	grinder.reportToConsole
	grinder.console.multicastPort

and say
	java net.grinder.Console


You can also specify an explicit properties file to both the Grinder
and the Console as the first argument. For example:

	java net.grinder.Grinder myproperties


The output
**********

The final statistics summary looks something like this:

 Final statistics for this process:
            Successful
            Transactions  Errors     Abortions  Average (ms)  
 Test 0     100           0          0          0.30
 Test 1     100           0          0          0.20
 Test 2     100           0          0          0.00
 Test 3     100           0          0          0.10
 Test 4     100           0          0          0.10
 Test 5     100           0          0          0.10
 Test 6     100           0          0          0.00
 Test 7     100           0          0          0.00
 Test 8     100           0          0          0.50
 Test 9     100           0          0          0.30

Each test has one of 3 possible outcomes:

	1. Success. The number of Successful Transactions for that test is
	   incremented The time taken to perform the test is added to
	   the Total.

	2. Error - "false" is returned from doTest(). The exact
	   interpretation of this depends on the plugin. The number of
	   Errors for the test is incremented.

	3. Abortion. The plugin chooses to abort the cycle or thread.
	   Again, when this might happens depends on the plugin. The
	   number of Abortions for the test is incremented.

The Total and Average figures are calculated based only on successful
transactions.


I don't get it, help!
*********************

Try asking at grinder-use@lists.sourceforge.net


How do I fix it?
****************

Please send bug fixes and enhancements you make to
grinder-development@lists.sourceforge.net.

BEA keeps me very busy so the timeliness and quality of any email
support I provide may vary.


What can I set in grinder.properties?
*************************************

[This is not complete - volunteer work required!]

    grinder.processes	-	The number of child VM processes to start.

    grinder.threads	-	The number cycles of the threads each 
				process spawns.

    grinder.cycles	-	The number cycles of the test script
				each thread performs.

    grinder.jvm		-	Use an alternate JVM for child processes.

    grinder.jvm.path	-	Specifies the java executable used for
				the child JVMs. Defaults to "java" so
				you do not need to specify this if
				your path is sensible.

    grinder.jvm.classpath -	Use to adjust the classpath used for
				the child VMs. Anything specified here
				will be prepended to the classpath
				used to start the grinder itself.

    grinder.jvm.arguments -	Additional arguments to child JVM's.

    grinder.hostID	-	Override the "host" string used in log
   				filenames and logs. Defaults to the
    				host name.

    grinder.appendLog	-	Append to, rather than overwrite,
				existing log files.

    grinder.receiveConsoleSignals -
				Set to true to respond to Console
				"start" and "stop" signals. This will
				mean that the test cycles will not
				start until a Console signal is
				recieved.

    grinder.reportToConsole -	Set to true to send stats to the Console.

    grinder.multicastAddress -  The multicast address to use for
				communication between the grinder
				processes and the Console.
				(See "What do I need to do to set up
				multicast?" below).

    grinder.multicastPort -     The multicast port to use for communication
				from the Console to the grinder processes.

    grinder.console.multicastPort -
				The multicast port to use for communication
				from the grinder processes to the Console.

    grinder.reportToConsole.interval -
				The period at which each process sends
				updates to the Console (default 500
				ms).

    grinder.thread.initialSleepTime	-
				The maxmimum time in milliseconds that
				each thread waits before starting.
				Unlike the other sleep times, this is
				varied according to a flat random
				distribution. The actual sleep time
				will be a random value between 0 and
				the specified value. Affected by
				grinder.thread.sleepTimeFactor, but
				not grinder.thread.sleepTimeVariation.

    grinder.thread.sleepTime -	The time in milliseconds to wait
				between individual tests. Affected by
				both grinder.thread.sleepTimeFactor,
				and grinder.thread.sleepTimeVariation.

    grinder.thread.sleepTimeFactor -
				Apply a factor to all the sleep times
				you've specified. E.g., setting this
				to 0.1 would run the script at ten times
				te speed.

    grinder.thread.sleepTimeVariation -
				The Grinder varies the specified sleep
				times according to a Normal
				distribution. This property specifies
				a fractional range within which nearly
				all (99.75%) of the times will lye.
				E.g., if the sleep time is specified
				as 1000 and the sleepTimeVariation is
				set to 0.1, then 99.75% of the actual
				sleep times will be between 9900 and
				11000 milliseconds.

    grinder.plugin	-	The plugin class to use. Currently each
				script uses a single plugin.

    grinder.plugin.parameter -	Prefix for properties interpreted by
				the plugin. See the documentation for
				the HTTP plugin in doc directory for
				examples.

    grinder.test0	- 	Prefix for test 0 properties. Test 1 
				properties have a prefix of
				"grinder.test1", and so on. The
				tests are run in numerical order.

    grinder.test0.description -	Information string used in the log
			 	files. Will be used in the
				Console in the future.

    grinder.test0.sleepTime -	Override grinder.thread.sleepTime
				for a specific test.

    grinder.test0.parameter -	Prefix for test specific properties
			 	interpreted by the plugin. See the
			 	documentation for
				the HTTP plugin below for examples.

    grinder.logProcessStreams - Set to false to disable the logging of
				standard out and standard error steams
				for individual Grinder processes.
				Default is true. You might want to use
				this to reduce the overhead of running
				a client thread. When recording
				timings with multiple clients it will
				probably reduce the measured time -
				see doc/Timing.txt.

    grinder.recordTime	   -	Set to false to disable reporting of
				timing information; other statistics
				are still reported. Default is true.
				See doc/Timing.txt.

You should read the files doc/HTTPPlugin.txt and doc/JUnitPlugin.txt
for details on the properties for individual plugins.


What do I need to do to set up multicast?
*****************************************

You must set up multicast if you want to use the Console. It is used
to send signals from the Console to the Grinder processes (start,
stop) and to send statistics reports from the Grinder processes to the
Console.

For most modern TCP stacks, e.g Windows 95/98/NT, Linux, multicast
works out of the box.

Under Linux, you may also need to set up the routing table. Try:

 $ route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0

Some Windows VPN clients (e.g Bay Networks Extranet) interfere with
multicast. You may need to disable them.


Tell me more about the Console controls?
****************************************

The process controls:

  The controls "Start processes" and "Stop processes" send signals to
  start and stop any Grinder processes that are currently listening.

The sample controls:

  There are a set of slider controls that determine the samples that
  the Console will capture. It is important to understand that these
  sliders control the Console behaviour _only_. For example, they do
  not adjust the frequency at which the Grinder processes report (see
  grinder.reportToConsole.interval for that). Additionally, the do not
  interact in any way with the process controls.

  The first slider controls the period at which the console will take
  a "sample". This involves adding up all the reports recieved over
  that sample interval and calculating the TPS as (number of
  transactions that occured)/(interval length). It is also the period
  at which the Console graphs and statistics are updated.

  By default, the Console discards the first non-zero sample period,
  and starts updating the display and calcluating totals from the
  second sample. A non-zero sample period is one in which an update
  from a Grinder process was received. You can adjust how many
  non-zero sample periods the Console ignores before starting capture
  with the second slider.

  The third slider allows you to adjust how many samples the Console
  will collect before stopping capture.

  You can also manually start and stop the sampling with the "Capture
  statistics" and "Stop capture" controls. Using the "Capture
  statistics" button resets all the captured statistics and "arms" the
  Console to ignore the specified number of non-zero samples before
  starting capture again.

  Finally, the "Summary" control displays a table of results, similar
  to what the individual Grinder processes produce but based on
  statistics collected from all of the processes over the sample
  period. In future we hope to add "File/Save" type functionality to
  save the results of a capture.


Can I run different test scripts against the same Console?
**********************************************************

Yes.

Whilst the Console reads the grinder.properties file to determine the
names of the tests, it is fairly decoupled from the Grinder processes.
It receives reports and updates the graph based on test number. Thus
it is possible to have different Grinder processes running scripts
with different test numbers (e.g. one process running tests 1 to 5 and
another running tests 6 to 10)., reporting to the same Console. You
would have to start the console against a dummy properties file that
contained all the tests (e.g 1 to 10).

This is definitely a hack at the moment. We plan to resolve this with
a much better Console/Grinder model in the Grinder 3. (James Bond will
return in ....).


Development goals
*****************

The Grinder should remain simple and Java based.

The Grinder should be useable with the standard JDK. For example, it
should not rely on WebLogic Server specific classes except for
optional WebLogic Server specific extensions. An exception to this
rule has been made for Jakarta Ant and Regexp because they are under
Free (unless you talk to RMS) licenses.

See the grinder-development list archives for further musings.
