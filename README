The Grinder
Copyright (C) 2000 Paco Gomez
Copyright (C) 2000 Philip Aston

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

Please see the file COPYING for details of the General Public License.


What is it?
***********

The Grinder is a simple, pure Java load-testing framework released
under the GNU Public License. It was originally developed for the book
"Professional Java 2 Enterprise Edition with BEA WebLogic Server" by
Páco Gomez and Peter Zadrozny.

Test client code is written in the form Java "plug-ins". Sample
plug-ins for testing HTTP and EJB services are provided. It is
particularly suitable for testing BEA WebLogic Server based
applications.


How do I build it?
******************

See the instructions in build.xml.


How do I use it?
****************

Its easy:

	1. Set your classpath to include the grinder.jar file in the
	   lib directory.

	2. Change to a test directory, and set up a grinder.properties
	   file which defines the test you want to perform. See the
	   examples directory for inspiration.

	3. Say
		java net.grinder.Grinder

If you want to use the console, tweak out the following properties	

	grinder.waitForConsoleSignal
	grinder.multicastAddress
	grinder.multicastPort

	grinder.reportToConsole
	grinder.console.multicastAddress.1.1.2
	grinder.console.multicastPort

and say
	java net.grinder.console.Console


How do I fix it?
****************

Please send bug fixes and enhancements you make to paston@bea.com.

BEA keeps me very busy so the timeliness and quality of any email
support I provide will vary.


How do I use the HTTPS plugin?
******************************

1) Install JSSE1.0.2. See
   http://java.sun.com/products/jsse/INSTALL.html

2) In your grinder.properties, use the HttpsPlugin rather than
   HttpPlugin:

	grinder.plugin=net.grinder.plugin.http.HttpsPlugin

3) You can then use https:// in your URLs

	grinder.plugin.parameter.url0=https://localhost:7002/snoop
	grinder.plugin.parameter.ok0=Requested URL:

4) If you want two-way authentication, add the following lines

	grinder.plugin.parameter.clientCert=./philclient.p12
	grinder.plugin.parameter.clientCertPassword=acrobat

	(export p12 from netscape)

The JSSE SSL implementation isn't quick. This should be taken into
account when comparing round trip times, as a compiled browser version
is likely to be a *lot* faster.


What can I set in grinder.properties?
*************************************

[This is not complete - volunteer work required!]

    grinder.jvm.path	-	Specifies the java executable used for
				the child JVMs. Defaults to "java" so
				you do not need to specify this if
				your path is sensible.

    grinder.jvm.classpath -	Use to adjust the classpath used for
				the child VMs. Anything specified here
				will be prepended to the classpath
				used to start the grinder itself.

    grinder.jvm.arguments -	Additional arguments to child JVM's.


What can I set in grinder.properties for the HTTP plugin?
*********************************************************

    grinder.plugin.parameter.followRedirects -
				Set to true to automatically follow
				redirects, so you don't have to have
				additional URL's in you scripts. The
				default is false.

				If you are using WebLogic Server and
				Web Application form-based
				authentication you leave this property
				set to false. This is because a
				redirect request that follows
				authentication contains a key cookie -
				setting the property to true prevents
				the cookie from being picked up by the
				plugin.


What is the TCPSniffer and how do I use it?
*******************************************

The TCPSniffer is a proxy that you can place between in a TCP stream.
It filters the request and response streams, sending the results to
stdout. You can control its behaviour by specifying different filters.

Whilst its very useful in its own right, its main purpose as far as
the Grinder goes is to automatically generate scripts for the HTTP
plugin.

You invoke the sniffer with something like:

  CLASSPATH=/opt/grinder/lib/grinder.jar;
  CLASSPATH=$CLASSPATH:/opt/jakarta-regexp-1.2/jakarta-regexp-1.2.jar
  export CLASSPATH

  java net.grinder.TCPSniffer

Say "java net.grinder.TCPSniffer -?" to get a list of the command line
options.

To use it to generate a HTTP plugin script segment of a conversation
with a server on host "server", port "7001", you should say something
like:

  java net.grinder.TCPSniffer -httpPluginFilter -remoteHost server

  Initialising standard sniffer engine with the parameters:
     Request filter:  net.grinder.plugin.http.HttpPluginSnifferFilter
     Response filter: net.grinder.tools.tcpsniffer.NullFilter
     Local port:       8001
     Remote host:      server
     Remote port:      7001
  Engine initialised, listening on port 8001
  Starting engine

You should then point your browser at "localhost:8001" and exercise
the application.

You should obtain the Jakarta Regexp package from
http://jakarta.apache.org/. We don't include it with the Grinder
distribution due to the restrictions of the GPL, see
http://www.gnu.org/philosophy/license-list.html for details.


Using the HttpPluginSnifferFilter
*********************************

The output of the HttpPluginSnifferFilter looks like:

  java net.grinder.TCPSniffer -httpPluginFilter

  Initialising standard sniffer engine with the parameters:
     Request filter:  net.grinder.plugin.http.HttpPluginSnifferFilter
     Response filter: net.grinder.tools.tcpsniffer.NullFilter
     Local port:       8001
     Remote host:      localhost
     Remote port:      7001
  Engine initialised, listening on port 8001
  Starting engine
  grinder.plugin.parameter.url0=http://localhost:7001/
  grinder.plugin.parameter.url1=http://localhost:7001/lah.html
  grinder.plugin.parameter.url2=http://localhost:7001/test.gif
  grinder.plugin.parameter.url3=http://localhost:7001/snoop
  grinder.plugin.parameter.post3=http-plugin-sniffer-post-3

The script part of this is sent to the stdout stream, whereas the
information messages are sent to stderr. You can redirect the script
part to a file if you wish:

  java net.grinder.TCPSniffer -httpPluginFilter > myscript

Note, the HttpPluginSnifferFilter does not produce a complete
grinder.properties script. In particular, it does not output thr
property grinder.plugin.methods. You currently have to do this by hand
(patches accepted!).

Additionaly, the parsing of HTTP messages probably contains bugs.
Don't let this put you off, using the HttpPluginSnifferFilter is a
very quick way of doing 95% of a tedious job.


Development goals
*****************

The Grinder should remain simple and Java based.

The Grinder should be useable with the standard JDK. For example, it
should not rely on WebLogic Server specific classes except for
optional WebLogic Server specific extensions. An exception to this
rule has been made for Jakarta Ant and Regexp because they are under
Free (unless you talk to RMS) licenses.
