This file contains notes about the use of The Grinder HTTP Plugin.


What can I set in grinder.properties for the HTTP plugin?
*********************************************************

    grinder.plugin.parameter.useCookies -
				Set to false to disable cookie
				handling (it defaults to true).

    grinder.plugin.parameter.useCookiesVersionString -
				Set to false to remove $Version string
				from cookies (it defaults to true).
				This is to work around broken (?)
				JRun 2.3.3. behavour.

    grinder.plugin.parameter.followRedirects -
				Set to true to automatically follow
				redirects, so you don't have to have
				additional URL's in you scripts. The
				default is false.

				You should always set this to false for
				TCPSnffer generated scripts.

				If you are using WebLogic Server and
				Web Application form-based
				authentication you leave this property
				set to false. This is because a
				redirect request that follows
				authentication contains a key cookie -
				setting the property to true prevents
				the cookie from being picked up by the
				plugin.

    grinder.plugin.parameter.timeIncludesTransaction -

				By default the time that the HTTP
				plugin reports is the time it takes
				for the remote server to accept the
				connection request. When using the
				times as an indicator of user
				experience, this is usually what you
				want.

				Sometimes however you are more
				interested in the time the entire HTTP
				transaction takes, including the time
				required to read the entire HTTP
				response over the network. If so, set
				this parameter to true.

    grinder.plugin.parameter.stringBean -
				Fully qualified classname of a Java
				bean that can provide dynamic strings
				for URL's and POST data. See "What's a
				String Bean?" below.

    grinder.test0.parameter.url -
				The URL to call. The HTTP GET method
				is used unless
			 	grinder.test0.parameter.post is
			 	specified.

    grinder.test0.parameter.ok	-
				Fail if the returned page doesn't
			 	contain this string.

    grinder.test0.parameter.post -
				Specify a file containing POST data to
			 	send.

    grinder.test0.parameter.ifModifiedSince -
				This appears in the HTTP
			 	"If-Modified-Since" request header,
			 	allowing the grinder to simulate the
			 	a browser's caching of pages. Its value
				should be a date of the form
				Sat, 06 Jan 2001 13:36:39 GMT.

    grinder.test0.parameter.basicAuthenticationUser -
    grinder.test0.parameter.basicAuthenticationPassword -
				Used togther, these specify an HTTP
				basic authentication header that will
				be sent with the request. The values
				can be varied using a String Bean, see
				"What's a String Bean?" below.


What's a String Bean?
*********************

When using the HTTP plugin, it is often necessary to parametrise parts
of URL's, POST data, and other request strings. The easy way to do
this is to use a "String Bean" - a Java Bean that returns Strings from
its "get" methods.

For example, supporse you wanted to modify the URL
"http://myhost/test.jsp?n=1" such that n is set to a random number
each time? Easy! Here's how.

Write a simple bean:

  // MyStringBean.java
  package mystuff;

  public class MyStringBean {
    private Random m_random = new Random();

    public String getRandomInteger() {
      return Integer.toString(m_random.nextInt());
    }
  }

Compile this and put it in your classpath. Then alter your
grinder.properties to include this line:

  grinder.plugin.parameter.stringBean=mystuff.MyStringBean

Alter the test URL parameter as follows:

  grinder.test0.parameter.url=http://myhost/test.jsp?n=<getRandomInteger>


The <beanMethodName> syntax can be used in any URL string or POST data
file. It must correspond to a public method of the string bean that
takes no parameters and returns a String.

Each string bean instance is instantiated per thread, and maintains
its state between invocations. If your bean needs additional
information regarding the test lifecycle (for example, to reset a
counter and the beginning of a cycle), it can implement the
net.grinder.plugin.http.StringBean interface. See the examples in
net.grinder.plugin.http.example.


How do I use the HTTPS plugin?
******************************

1) Install JSSE1.0.2. See
   http://java.sun.com/products/jsse/INSTALL.html

2) In your grinder.properties, use the HttpsPlugin rather than
   HttpPlugin:

	grinder.plugin=net.grinder.plugin.http.HttpsPlugin

3) You can then use https:// in your URLs

	grinder.plugin.parameter.url0=https://localhost:7002/snoop
	grinder.plugin.parameter.ok0=Requested URL:

4) If you want two-way authentication, add the following lines

	grinder.plugin.parameter.clientCert=./philclient.p12
	grinder.plugin.parameter.clientCertPassword=acrobat

	(export p12 from netscape)

The JSSE SSL implementation isn't quick. This should be taken into
account when comparing round trip times, as a compiled browser version
is likely to be a *lot* faster.


HTTPClient
**********

The HTTP plugin now has *experimental* support for Ronald Tschalär's
excellent HTTPClient library instead of HttpURLConnection.

To use specify that the HTTP plugin should use HTTPClient instead of
HttpURLConnection, say

    grinder.plugin.parameter.useHTTPClient=true


I highly recomend trying the HTTPClient integration, see the next
section for why. I'm planning to drop support for HttpURLConnection in
future versions. However, there are some limitations you should be
aware of: 

 1. Currently the HTTPClient integration can only use a single server
    per cycle.

 2. The timeIncludesTransaction parameter is ignored. Instead the
    reported time is as if timeIncludesTransaction=true.

 3. HTTPS almost certainly doesn't work.

 4. The useCookiesVersionString parameter is ignored. The HTTPClient
    cookie support is damn good, so this probably isn't a problem.

1 to 3 will be fixed in a future version. 4 will be fixed if it turns
out to be a problem.


HTTPClient versus HttpURLConnection
***********************************

HTTPClient has many more features than HttpURLConnection, see
http://www.innovation.ch/java/HTTPClient/urlcon_vs_httpclient.html for
a comparision.

I hope to lever features such as proxy support, connection timeouts
and persistent cookies into future versions of The Grinder.

One of the key advantages for The Grinder is that HTTPClient allows
explicit control of connection management, whereas HttpURLConnection
uses connection pooling "under the covers".

Because HTTPClient uses extra connections, it may appear slower -
particularly if the client and server are co-hosted (see Timing.txt).
However, its a closer modell of reality (one cycle equals one browser
session).

In my experience, HTTPClient is _much_ more RFC compliant, and less
buggy than HttpURLConnection.
