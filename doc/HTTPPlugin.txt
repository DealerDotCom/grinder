This file contains notes about the use of The Grinder HTTP Plugin.


What can I set in grinder.properties for the HTTP plugin?
*********************************************************

    grinder.plugin.parameter.useCookies -
				Set to false to disable cookie
				handling (it defaults to true).

    grinder.plugin.parameter.followRedirects -
				Set to true to automatically follow
				redirects, so you don't have to have
				additional URL's in you scripts. The
				default is false.

				You should always set this to false for
				TCPSnffer generated scripts.

				If you are using WebLogic Server and
				Web Application form-based
				authentication you leave this property
				set to false. This is because a
				redirect request that follows
				authentication contains a key cookie -
				setting the property to true prevents
				the cookie from being picked up by the
				plugin.

    grinder.plugin.parameter.stringBean -
				Fully qualified classname of a Java
				bean that can provide dynamic strings
				for URL's and POST data. See "What's a
				String Bean?" below.

    grinder.test0.parameter.url -
				The URL to call. The HTTP GET method
				is used unless
			        grinder.test0.parameter.post is
			 	specified.

				The value can be varied using a String
				Bean, see "What's a String Bean?"
				below.

    grinder.test0.parameter.ok	-
				Fail if the returned page doesn't
			 	contain this string.

				The value can be varied using a String
				Bean, see "What's a String Bean?"
				below.

    grinder.test0.parameter.post -
				Specify a file containing POST data to
			 	send.

				The value can be varied using a String
				Bean, see "What's a String Bean?"
				below.

    grinder.test0.parameter.header.X -
				where X can be an arbitrary string.

				Add a X: header to the request with
				the specified value.

				The value can be varied using a String
				Bean, see "What's a String Bean?"
				below.

    grinder.test0.parameter.basicAuthenticationRealm -
    grinder.test0.parameter.basicAuthenticationUser -
    grinder.test0.parameter.basicAuthenticationPassword -
				Used togther, these specify an HTTP
				basic authentication header that will
				be sent with the request. If you
				specify one of these values, you must
				specify all three.

				Note, the default HTTPClient
				implementation only sends this if
				challenged by the server, as a browser
				would, and the specified
				basicAuthenticationRealm must match
				the realm required by the
				WWW-Authenticate header in the
				challenge.

				The values can be varied using a
				String Bean, see "What's a String
				Bean?" below.


What's a String Bean?
*********************

When using the HTTP plugin, it is often necessary to parametrise parts
of URL's, POST data, and other request strings. The easy way to do
this is to use a "String Bean" - a Java Bean that returns Strings from
its "get" methods.

For example, supporse you wanted to modify the URL
"http://myhost/test.jsp?n=1" such that n is set to a random number
each time? Easy! Here's how.

Write a simple bean:

  // MyStringBean.java
  package mystuff;

  public class MyStringBean {
    private Random m_random = new Random();

    public String getRandomInteger() {
      return Integer.toString(m_random.nextInt());
    }
  }

Compile this and put it in your classpath. Then alter your
grinder.properties to include this line:

  grinder.plugin.parameter.stringBean=mystuff.MyStringBean

Alter the test URL parameter as follows:

  grinder.test0.parameter.url=http://myhost/test.jsp?n=<getRandomInteger>


The <beanMethodName> syntax can be used in any URL string or POST data
file. It must correspond to a public method of the string bean that
takes no parameters and returns a String.

Each string bean instance is instantiated per thread, and maintains
its state between invocations. If your bean needs additional
information regarding the test lifecycle (for example, to reset a
counter and the beginning of a cycle), it can implement the
net.grinder.plugin.http.StringBean interface. See the examples in
net.grinder.plugin.http.example.


HTTPClient
**********

The HTTP plugin has two implementations. The default implementation is
based on Ronald Tschalär's excellent HTTPClient library. An
alternative implementation which uses the JDK's HttpURLConnection can
also be used, but is deprecated and will be removed in a future
release.

To use specify that the HTTP plugin should use HttpURLConnection
instead of HTTPClient, say

    grinder.plugin.parameter.useHTTPClient=false


I highly recomend the HTTPClient implementation, see the next section
for why. However the HttpURLConnection implementation has two features
that the HTTPClient implementation doesn't.

The first feature is an additional parameter:

    grinder.plugin.parameter.useCookiesVersionString -
				Set to false to remove $Version string
				from cookies (it defaults to true).
				This is to work around broken (?)
				JRun 2.3.3. behavour.

The second feature is the reporting of the "mean time to first byte"
statistic in addition to the normal total transaction time statistic.
    

The HTTPClient cookie support is damn good, so the first feature
probably isn't an issue. It will be fixed if it turns out to be a
problem.

The second feature will be supported by the HTTPClient implementation
in a future release.


HTTPClient versus HttpURLConnection
***********************************

HTTPClient has many more features than HttpURLConnection, see
http://www.innovation.ch/java/HTTPClient/urlcon_vs_httpclient.html for
a comparision.

I hope to lever features such as proxy support, connection timeouts
and persistent cookies into future versions of The Grinder.

You can access many HTTPClient features by setting system properties.
See http://www.innovation.ch/java/HTTPClient/advanced_info.html for a
list of properties. For example, adding

     -DHTTPClient.forceHTTP_1.0=true

to the grinder.jvm.arguments setting in grinder.properties will force
HTTPClient to use HTTP 1.0 instead of HTTP 1.1.

One of the key advantages for The Grinder is that HTTPClient allows
explicit control of connection management, whereas HttpURLConnection
uses connection pooling "under the covers".

Because HTTPClient uses extra connections, it may appear slower -
particularly if the client and server are co-hosted (see Timing.txt).
However, its a closer model of reality (one cycle equals one browser
session).

In my experience, HTTPClient is _much_ more RFC compliant, and less
buggy than HttpURLConnection.


How do I use HTTPS?
*******************

There are patches available to HTTPClient to work with several SSL
implementations. See
http://www.innovation.ch/java/HTTPClient/https.html for details. The
instructions that follow assume you are using JSSE 1.0.2.

1) Install JSSE1.0.2. Follow the instructions in
   http://java.sun.com/products/jsse/INSTALL.html. I recommend
   installing the JSSE as an installed extension.

2) Download the HTTPClient JSSE patch from 
   http://www.innovation.ch/java/HTTPClient/JSSE.zip

   Extract the classfiles contained within the zip into a directory
   called HTTPClient, then create a jar containing that directory:

	  $ mkdir HTTPClient; cd HTTPClient 
	  $ jar xf /download/JSSE.zip
	  $ cd ..
	  $ jar cf HTTPClient-JSSE.jar HTTPClient

   Add this jar to the *start* of your CLASSPATH before running The
   Grinder.

   Its worth reading the file README in JSSE.zip.

3) You can now use URL's that start with https: in your
   grinder.properties.

You may well need to create a truststore containing CA certificates
that sign the server certificate. See the JSSE documentation for full
details, here's a quick hint:

 $ keytool -import -v -keystore ./mycastore -file d:/wls5/myserver/ca.pem

You should then add -Djavax.net.ssl.trustStore=mycastore to
grinder.jvm.arguments in your grinder.properties. Refer to the JSSE
documentation for other useful properties. In particular
-Djavax.net.debug=ssl might come in useful.

HTTPClient checks that the host name in each request URL matches the
subject DN field in the certificate. If this isn't the case, you might
need to add an entry to /etc/hosts, c:/WINNT40/system32/drivers/etc/,
DNS or whatever, and then use that hostname in the request URL's.

The JSSE SSL implementation isn't quick. This should be taken into
account when comparing round trip times, as a compiled browser version
is likely to be a *lot* faster.


How do I use the HTTPS plugin (HttpURLConnection implementation only)
*********************************************************************

NB This information applies to the deprecated HttpURLConnection
implementation. For information on using HTTPS with the default
HTTPClient implementation, see above.

1) Install JSSE1.0.2 as described above.

2) In your grinder.properties, use the HttpsPlugin rather than
   HttpPlugin:

	grinder.plugin=net.grinder.plugin.http.HttpsPlugin

3) You can then use https:// in your URLs

	grinder.plugin.parameter.url0=https://localhost:7002/snoop
	grinder.plugin.parameter.ok0=Requested URL:

4) If you want two-way authentication, add the following lines

	grinder.plugin.parameter.clientCert=./philclient.p12
	grinder.plugin.parameter.clientCertPassword=acrobat

	(export p12 from netscape)
