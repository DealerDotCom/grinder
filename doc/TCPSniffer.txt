This file contains notes about the use of The Grinder TCPSniffer.


What is the TCPSniffer and how do I use it?
*******************************************

The TCPSniffer is a proxy that you can place between in a TCP stream.
It filters the request and response streams, sending the results to
stdout. You can control its behaviour by specifying different filters.

Whilst its very useful in its own right, its main purpose as far as
the Grinder goes is to automatically generate scripts for the HTTP
plugin.

You invoke the sniffer with something like:

  CLASSPATH=/opt/grinder/lib/grinder.jar;
  CLASSPATH=$CLASSPATH:/opt/jakarta-regexp-1.2/jakarta-regexp-1.2.jar
  export CLASSPATH

  java net.grinder.TCPSniffer

Say "java net.grinder.TCPSniffer -?" to get a list of the command line
options.

You can use the sniffer to generate a HTTP plugin script segment
suitable for use with The Grinder. Suppose you want to capture a
conversation with a server on host "server", port "7001", you should
say something like:

  java net.grinder.TCPSniffer -remoteHost server

  Initialising standard sniffer engine with the parameters:
     Request filter:  net.grinder.tools.tcpsniffer.EchoFilter
     Response filter: net.grinder.tools.tcpsniffer.EchoFilter
     Local host:       localhost
     Local port:       8001
     Remote host:      localhost
     Remote port:      7001
  Engine initialised, listening on port 8001

You should then point your web browser at "localhost:8001" and
exercise the application through the browser. The TCPSniffer will echo
your requests to the terminal and forward the requests to
localhost:7001, as well as echoing response from the server the
terminal and returning them to the browser.

If you want the output to go to a file rather than the terminal, you
can use standard command line redirection, for example:

  java net.grinder.TCPSniffer >SimpleTest.out 2>SimpleTest.err

will redirect stdout to SimpleTest.out and stderr to SimpleTest.err.


Using the TCPSniffer as a HTTP proxy
************************************

One problem of running the TCPSniffer as described above is that it
only forwards to a single remote host. Any links or redirects to other
hosts that the application returns to the browser will bypass the
TCPSniffer, meaning that they will not feature in the test script.
This also apllies to absolute URL's to the server.

When recording browser traffic, a much better way to use the
TCPSniffer is to run it as an HTTP proxy:

  java net.grinder.TCPSniffer -proxy

This will make it listen as an HTTP proxy on port 8001 (the default,
you can change it with -localPort), and forward requests onto the
relevant remote host, while echoing out the HTTP interactions.

You should set your browser connection settings to specify the TCP
sniffer as the HTTP proxy (set host to be the host on which the
TCPSniffer is running and port to be 8001). You then use your browser
as normal, e.g. in the example in the previous section you should
access "http://localhost:7001" directly.

The TCPSniffer can also run as an HTTPS proxy if you specify -ssl.


Using the HttpPluginSnifferFilter
*********************************

java net.grinder.TCPSniffer -proxy -httpPluginFilter


The output of the HttpPluginSnifferFilter looks like:

  Initialising standard sniffer engine with the parameters:
     Request filter:  net.grinder.plugin.http.HttpPluginSnifferFilter
     Response filter: net.grinder.tools.tcpsniffer.NullFilter
     Local host:       localhost
     Local port:       8001
     Listening as an HTTP proxy
  Engine initialised, listening on port 8001

  #
  # The Grinder version 2.8.3
  #
  # Script generated by the TCPSniffer at 25-Apr-02 08:17:57
  #
  
  grinder.processes=1
  grinder.threads=1
  grinder.cycles=0         # Until console sends stop.

  grinder.test0.sleepTime=11336
  grinder.test0.parameter.url=http://localhost:7001/
  grinder.test1.sleepTime=12168
  grinder.test1.parameter.url=http://localhost:7001/lah.html
  grinder.test2.sleepTime=411
  grinder.test2.parameter.url=http://localhost:7001/test.gif
  grinder.test3.sleepTime=4786
  grinder.test3.parameter.url=http://localhost:7001/lah.html
  grinder.test3.parameter.header.If-Modified-Since=Tue, 16 Jan 2001 16:26:42 GMT
  grinder.test4.sleepTime=311
  grinder.test4.parameter.url=http://localhost:7001/test.gif
  grinder.test4.parameter.header.If-Modified-Since=Mon, 06 Nov 2000 08:35:58 GMT

The script part of this is sent to the stdout stream, whereas the
information messages are sent to stderr. You can redirect the script
part to a file if you wish:

  java net.grinder.TCPSniffer -httpPluginFilter > grinder.properties

You can then use this file with The Grinder.


What are all those funny [31 characters?
******************************************

Did you use the -colour switch? If so, the TCP sniffer generates
escape codes which work on ANSI compliant terminals and look very
pretty.

For those of those on Windows platforms, this _doesn't work_ with the
CMD.EXE window unless you're using Cygwin. (Of course, if you're using
Cygwin you'd use rxvt in preference :-)).


SSL and HTTPS support
*********************

The TCPSniffer has SSL support. You must first install the JSSE
(http://java.sun.com/products/jsse/).

SSL relationships are necessarily point to point. When you interpost
the TCPSniffer you end up with:

  Client <--- ssl1 ---> TCPSniffer <--- ssl2 ---> Server

Where ssl1 and ssl2 are two separate SSL connections. Each SSL
connection has its own set of client and server certificates (both of
which are optional).

The TCPSniffer will negotiate appropriate certficates for both
connections using certificates specified in a key store. See the JSSE
documentation for how to set up a key store. There are 3 parameters
you can pass to the TCPSniffer to specify key store details:

    -keyStore <file>	       The key store file.
    -keyStorePassword <pass>   The password for the key store.
    -keyStoreType <type>       The type, defaults to "jks".

You can also specify these with the corresponding javax.net.ssl.XXX
properties.

Here's an example of starting the TCPSniffer as an HTTPS proxy using
the "testkeys" key store provided with the JSSE samples:

  sniff -ssl -proxy -keyStore testkeys -keyStorePassword passphrase

You may find NullPointerExceptions when using PKCS12 files generated
by some tools, e.g. openssl. Use the Java keytool utility to maintain
keystores and you'll be alright.
