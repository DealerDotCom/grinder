<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
<header>
  <title>The HTTP Plug-in</title>
</header>

<body>

  <fixme author="PA">Material to come! For now see the <a
  href="script-javadoc/index.html">script API</a>, the <a
  href="site:script-gallery">script gallery</a> and Richard Perks' <a
  href="site:tutorial">tutorial</a>.</fixme>

  <warning>Draft material follows.</warning>
  <section>
  <title>What's it for?</title>
  <p>The HTTPPlugin is a mature plug-in for testing HTTP services. 
  It has a number of utitlies useful for HTTP scripts as well as a 
  tool, <a href="site:g3/getting-started/tcpproxy/HTTPPluginTCPProxyFilter">TCPProxy</a>,
  which allows HTTP scripts to be automatically recorded.</p>
  </section>
  <section>
  <title>Controlling the HTTPPlugin</title>
  <p>The HTTPPlugin behaviour can be controlled from within scripts run by The Grinder
  through the use of the HTTPPluginControl facade.</p>
  
  <section>
  <title>Levels of Control</title>
  <p>There are three levels of control of the behaviour of the HTTPPlugin that
  the HTTPPluginControl facade gives you access to:</p>
  <ol>
  <li><strong>Default Connection Behaviour</strong>
    <ul>
      <li><p>Method: <code>getConnectionDefaults</code></p></li>
      <li><p>Returns a <code>HTTPPluginConnection</code> that can be used to set
      the default behaviour of new connections.</p></li>
    </ul>
  </li>
  <li><strong>Thread Connection Behaviour</strong>
    <ul>
      <li><p>Method: <code>getThreadConnection</code></p></li>    
      <li><p>Returns a <code>HTTPPluginConnection</code> for a particular URL.</p></li>
      <li><p>The resulting <code>HTTPPluginConnection</code> is valid for the current thread
      and the current run. It can be used to set specific authentication details,
      default headers, cookies, proxy servers, and so on for the current thread/run
      on a per-URL basis.</p></li>
      <li><p>This method will throw a <code>GrinderException</code> if not called from a worker thread.</p></li>
    </ul>
  </li>
  <li><strong>Thread HTTPClient Context Object Behaviour</strong>
    <ul>
      <li><p>Method: <code>getThreadHTTPClientContext</code></p></li>        
      <li><p>Returns the HTTPClient context object for the calling worker thread. This is useful when 
      calling HTTPClient methods directly, e.g. <code>CookieModule.listAllCookies(Object)</code>.</p></li>
      <li><p>This method will throw a <code>GrinderException</code> if not called from a worker thread.</p></li>
    </ul>
  </li>
  </ol>
  </section>
  
  <section>
  <title>Importing the HTTPPluginControl</title>
  <p>Place the following line at the top of your grinder script along with 
  your other import statements</p>
<source>
from net.grinder.plugin.http import HTTPPluginControl
</source>
  </section>  

  </section>
  <section>
  <title>Using the HTTPPlugin</title>
	  	    
  <section>
    <title>Setting an HTTP proxy</title>

    <p>Should you need to specify an HTTP proxy to route requests through
    the following code can be used to specify the default proxy used.</p>


<source>
control = HTTPPluginControl.getConnectionDefaults()
control.setProxyServer("localhost", 8001)
</source>
   
    <p>HTTP proxies can also be specified at the thread connection level. This
    is useful to specify proxies on a per URL basis.</p>
    
<source>
control = HTTPPluginControl.getThreadConnection()
proxyURL1 = control("http://<em>(url1)</em>")
proxyURL2 = control("http://<em>(url2)</em>")
proxyURL1.setProxyServer("localhost", 8001)
proxyURL2.setProxyServer("localhost", 8002)
</source>


  </section>

  <section>
    <title>Setting HTTPClient Authorization module:</title>
    <p>The HTTPClient Authorization module is no longer enabled by default
    because it prevents raw Authorization headers being sent through.
    The module also slows things down as HTTPClient must parse responses
    for challenges.</p>
    <p>Advanced users who still wish to use the HTTPClient
    Authorization module can enable it using:</p>
<source>
control = HTTPPluginControl.getConnectionDefaults()
control.setUseAuthorizationModule(1)
</source>

  </section>

  <section>
    <title>Setting HTTP Headers</title>
    <p>The HTTPlugin allows you to set the HTTP Headers sent with requests. 
    The method takes the settings as header-name/value pairs</p>
<source>
control = HTTPPluginControl.getConnectionDefaults()
control.setDefaultHeaders(NVPair("<em>(header-name)</em>", "<em>(value)</em>"),))
</source>    
    <p>Typical headers you might want to set here are <code>Accept</code> and its <code>Accept-*</code> 
    relatives, <code>Connection</code>, <code>From</code>, <code>User-Agent</code>, etc.</p>
  <p> For example to disable persistent connections:</p>
<source>
control = HTTPPluginControl.getConnectionDefaults()
control.setDefaultHeaders(NVPair("Connection", "close"),))
</source>
   </section>

  <section>
    <title>Setting Encoding</title>
    <p>Encoding for Content or for Transfer can be switched on and off using boolean flags</p>
<source>
control = HTTPPluginControl.getConnectionDefaults()
control.setUseContentEncoding(0)
control.setUseTransferEncoding(1)
</source>
  </section>
  
  <section>
    <title>Setting Redirect Behaviour</title>
    <p>Setting the HTTPPlugin behaviour with regards to following redirects can 
    be switched on and off using boolean flags</p>
<source>
control = HTTPPluginControl.getConnectionDefaults()
control.setFollowRedirects(0)
</source>
  </section>  
  
  <section>
    <title>Setting Local Address</title>
    <p>Should you be conducting your tests on a server with multiple network interfaces
    you can set the local IP address used by the HTTPPlugin for outbound connections.</p>
<source>
control = HTTPPluginControl.getConnectionDefaults()
control.setLocalAddress("<em>(local IP Address)</em>")
</source>
  </section>    

  <section>
    <title>Setting Timeout Value</title>
    <p>The timeout value for used for creating connections and reading responses can be 
    controlled via the HTTPPlugin.</p>
    <p>The following example sets a default timeout value of 30 seconds for all connections.</p>
<source>
control = HTTPPluginControl.getConnectionDefaults()
control.setTimeout(30)
</source>
  </section>    

  <section>
    <title>Setting Cookie Behaviour</title>
    <p>Setting the HTTPPlugin behaviour with regards to whether cookies are used or not can 
    be switched on and off using boolean flags</p>
<source>
control = HTTPPluginControl.getConnectionDefaults()
control.setUseCookies(0)
</source>
  </section>  

  </section>
  
  <section>
    <title>Using HTTPUtilities</title>

    <p>The latest incarnation of the HTTPPlugin provides a new class:</p>

<source>net.grinder.plugin.http.HTTPUtilities</source>	  		
	<p>This new class has several methods which are useful for HTTP scripts.</p>
	  
	<section>
	   <title>Setting Basic Authorization</title>
	   <p>The HTTPUtilities class can create an NVPair for an HTTP Basic Authorization header using the following method:</p>
<source>
httpUtilities = HTTPPluginControl.getHTTPUtilities()
httpUtilities.basicAuthorizationHeader('<em>username</em>', '<em>password</em>')		
</source>	
			
	   <p>Include the header with each HTTPRequest that requires the authentication.</p>

<source>
request101.GET('/', (),
      ( httpUtilities.basicAuthorizationHeader('prelive', 'g3tout'), ))	
</source>		
				
	</section>
	<section>
	   <title>Getting the Last Response</title>
		<p>The HTTPUtilities class can return the response for the last request made by the calling worker thread using the following method:</p>
<source>
httpUtilities = HTTPPluginControl.getHTTPUtilities()
httpUtilities.getLastResponse()
</source>			
		<p>This returns the response, or <code>null</code> if the calling thread has not made any requests.</p>
		<p>This must be called from a worker thread, if not it throws a GrinderException.</p>
	</section>	  
	<section>
	   <title>Getting a Token Value from a Location URI</title>
		<p>The HTTPUtilities class can Return the value for a path parameter or query string name-value token with
        the given <code>tokenName</code> in a Location header from the last response. If there are multiple matches, the first value is returned.
		This utility can be invoked using the following method:</p>
<source>
httpUtilities = HTTPPluginControl.getHTTPUtilities()
httpUtilities.valueFromLocationURI(<em>tokenName</em>)
</source>			
		<p> If there is no match, an empty string is returned rather than
        <code>null</code>. This makes scripts more robust (as they don't need to
        check the value before using it), but they lose the ability to distinguish
        between a missing token and an empty value.</p>
		<p>This must be called from a worker thread, if not it throws a GrinderException.</p>		
	</section>	  	  
	<section>
	   <title>Getting a Token Value from a URI in the Body of the Response </title>
		<p>The HTTPUtilities class can Return the value for a path parameter or query string name-value token with
        the given <code>tokenName</code> in a URI in the body of the last
        response. If there are multiple matches, the first value is returned.
		This utility can be invoked using the following method:</p>
<source>
httpUtilities = HTTPPluginControl.getHTTPUtilities()
httpUtilities.valueFromBodyURI(<em>tokenName</em>)
</source>			
		<p>This returns the first value if one is found, or <code>null</code>.</p>
		<p>This must be called from a worker thread, if not it throws a GrinderException.</p>
	</section>	  
  </section>
		
  <section>
    <title>Recording of HTTP status codes</title>

    <p>If an <code>HTTPRequest</code> is wrapped in a
    <code>Test</code>, the HTTP response status codes for each call of
    the <code>HTTPRequest</code> are recorded to the process data log.
    If multiple <code>HTTPRequests</code> are wrapped in a
    <code>Test</code>, the status code of the last response is
    recorded.</p>
  </section>

</body>
</document>
