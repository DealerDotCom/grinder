<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
<header>
<title>The Console</title>
</header>
<body>

  <figure src="../images/console-screenshot-g3.png" width="739"
  height="420" alt="The Console"/>

  <section id="process-controls">
    <title>Process controls</title>

    <p><em>Start processes</em>, <em>Reset processes</em> and <em>Stop
    processes</em> send signals to Grinder processes that are
    listening. (See the <a
    href="site:getting-started/properties">properties</a>
    <code>grinder.useConsole</code>, <code>grinder.consoleHost</code>
    and <code>consolePort</code>.)</p>

    <p>Worker processes that are configured to receive console signals
    go through three states:</p>

    <ol>
      <li>Initiated (waiting for a console signal)</li>

      <li>Running (performing tests, reporting to console)</li>

      <li>Finished (waiting for a console signal)</li>
    </ol>

    <p>The <em>Start processes</em> control signals to worker
    processes that they should move into the running state. Processes
    that are already running ignore this signal. Processes that are in
    the finished state exit; the agent process will then reread the
    properties file and launch new worker processes in the running
    state.</p>

    <p>The <em>Reset processes</em> control signals all the worker
    processes to exit. The agent process will then reread the
    properties file and launch new worker processes.</p>

    <p>The <em>Stop processes</em> control signals all processes,
    including the agent processes, to exit. You usually want to use
    <em>Reset processes</em> instead.</p>

    <warning>Each time the worker processes run, they generate a new
    set of logs. Logs from previous runs are "archived" by renaming
    them. The number of logs that are kept from previous runs can be
    controlled with <code> grinder.numberOfOldLogs</code>.</warning>

  </section>

  <section>
    <title>Sample controls</title>

    <p>The sample controls determine how the console captures reports
    from the worker processes. It is important to understand that
    these only control the console behaviour. For example, they do not
    adjust the frequency at which the worker processes send reports
    (see <a
    href="site:getting-started/properties"><code>grinder.reportToConsole.interval</code></a>
    for that). Additionally, the sample controls do not interact in
    any way with the process controls.</p>

    <p>The slider controls the period at which the console will take a
    <em>sample</em>. This involves adding up all the reports received
    over that sample interval and calculating the TPS as (number of
    tests that occurred)/(interval length). It is also the period at
    which the console graphs and statistics are updated.</p>

    <p>By default, the console discards the first non-zero sample
    period, and starts updating the display and calculating totals
    from the second sample. A non-zero sample period is one in which
    an update from a worker process was received. You can adjust how
    many non-zero sample periods the console ignores before starting
    capture with the <em>ignore samples</em> text field.</p>

    <p>The third control allows you to adjust how many samples the
    console will collect before stopping capture.</p>

    <p>You can also manually start and stop the sampling with the
    <em>Capture statistics</em>/<em>Stop capture</em> control. Use the
    <em>Save statistics</em> control to save the current set of
    statistics to a file.</p>
  </section>

  <section>
    <title>Display</title>
   
    <p>On the console there are a number of tabs which display information about The Grinder and its tests. These are detailed below:</p>

    <section>
      <title>Graphs</title>

      <p>Each graph displays the 25 most recent Tests Per Second (TPS) 
      values for a particular test. A new value is added every console
      sample period. The y-axis is scaled so that the full height
      represents the peak TPS value received for the test since the
      display was last reset.</p>

      <p>The colours are based on the relative response time. Long
      response times are more red, short response times are more yellow.
      This acts as an eye-catcher, allowing expensive tests to be easily
      spotted.</p>

    </section>

    <section>

      <title>Results</title>

      <p>The Results tab shows the results from The Grinder instrumentation.</p>
 
      <table>

        <tr>
          <th>Instrument</th>
          <th>Description</th>
        </tr>

        <tr>
          <td><strong>Test</strong></td>

          <td>The test number as specified in the test script, eg. tests[14000] will display as Test 14000.</td>
        </tr> 

        <tr>
          <td><strong>Description</strong></td>

          <td>The test description as specified in the test script. If the HTTPProxy has been used to 
          generate the scripts the description field can be found in the httpscript_tests.py file, eg.
          tests[14000] = Test(14000, 'GET index.jsp').wrap(request14000) will display as 'Get index.jsp'.</td>
        </tr> 

        <tr>
          <td><strong>Successful Tests</strong></td>

          <td>The total number of iterations of the test that were successfully executed by The Grinder during the test run.</td>
        </tr> 

        <tr>
          <td><strong>Errors</strong></td>

          <td>The total number of iterations of the test that failed to be fully executed by The Grinder during the test run.</td>
        </tr> 

        <tr>
          <td><strong>Mean Time</strong></td>

          <td>The mean time taken to execute the test and receive the full response from the target server/application, in milliseconds.</td>
        </tr> 

        <tr>
          <td><strong>Mean Time Standard Deviation</strong></td>

          <td>The mean standard deviation of the time taken to execute the test and receive the full response from the target 
          server/application, in milliseconds.</td>
        </tr> 

        <tr>
          <td><strong>TPS</strong></td>

          <td>Transactions per second. The average number of iterations of the test that successfully ran in a one second interval.</td>
        </tr> 

        <tr>
          <td><strong>Peak TPS</strong></td>

          <td>Peak Transactions per second. The maximum number of iterations of the test that successfully ran in a one second interval.</td>
        </tr> 

      </table>

      <p>There is additional instrumentation for the HTTPPlugin.</p>

      <table>

        <tr>
          <th>Instrument</th>
          <th>Description</th>
        </tr>

        <tr>
          <td><strong>Mean Response Length</strong></td>

          <td>The mean size of HTTP response from the target server/application in response to the executed test, in bytes.</td>
        </tr> 

        <tr>
          <td><strong>Response Bytes per Second</strong></td>

          <td>The mean number of bytes per second received from the target server/application, in bytes per second. This gives an indication of the amount of
          bandwidth being consumed by the test. This does not take into account the amount of traffic being sent to the target server/application.</td>
        </tr> 

        <tr>
          <td><strong>Response Errors</strong></td>

          <td>The total number of HTTP Response Error Codes (eg, 404, 500 etc) received during the test run.</td>
        </tr> 

        <tr>
          <td><strong>Mean Time to Resolve Host</strong></td>

          <td>The mean time taken to resolve the ip address of the target server from the Fully Qualified 
          Domain Name, via hosts file or DNS, in milliseconds. This is the time relative to the start of the test iteration.</td>
        </tr> 

        <tr>
          <td><strong>Mean Time to Establish Connection</strong></td>

          <td>The mean time taken to establish a tcp connection to the target server/application, in milliseconds.
           This is the time relative to the start of the test iteration.</td>
        </tr> 

        <tr>
          <td><strong>Mean Time to First Byte</strong></td>

          <td>The mean time taken to receive the first byte of response from the target server/application, in milliseconds.
           This is the time relative to the start of the test iteration.</td>
        </tr> 

      </table>


    </section>

    <section>

      <title>Processes</title>

      <p>This tab displays information about the Agents, their worker processes and associated threads.</p> 

      <table>

        <tr>
          <th>Header</th>
          <th>Description</th>
        </tr>

        <tr>
          <td><strong>Process</strong></td>

          <td>The name of the process. A parent process will take the hostname of the box on which it is running
          Its child processes take the name of the parent process and add a suffix of "-x" where x is an integer,
          eg. myserver-0.</td>
        </tr> 

        <tr>
          <td><strong>Type</strong></td>

          <td>The type of process, eg. Agent or Worker.</td>
        </tr> 

        <tr>
          <td><strong>State</strong></td>

          <td>Information about the state of the process, eg. "Connected" for an agent process and "Running" and
           "Finished" for a Worker process.</td>
        </tr> 
      </table>

    </section>

    <section>

      <title>Script</title>

      <p>This tab contains the beginnings of console support for script editing. It is under construction and is not currently functional.</p>
      <p>Also on this tab are controls for the script distribution system (Also accessible through the <strong>Distribute</strong> menu)</p>
      <p>This gives you the ability to:</p>
      <ol>
        <li><strong>Set the root directory for script distribution</strong>
        <p>The directory on the console host that contains the scripts for distribution</p>
        </li>
        <li><strong>Set the script to run</strong>
        <p>This selects the script from those in the distributed list that is to be run</p>
        </li>
        <li><strong>Send changed files to worker processes</strong>
        <p>This pushes out the contents of the root directory to all connected worker processes</p>
        </li>
      </ol>

    </section>

  </section>

  <section>
    <title>Internationalisation help wanted</title>

    <p>If you are bilingual you might fancy <a
    href="site:contributing/translating">translating the console</a>
    into a language of your choice.</p>
  </section>

</body>
</document>

