<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<document>
<header>
<title>The Console</title>
</header>
<body>

  <figure src="../images/console-screenshot-g3.png" width="739"
  height="420" alt="The Console"/>

  <section id="process-controls">
    <title>Process controls</title>

    <p><em>Start processes</em>, <em>Reset processes</em> and <em>Stop
    processes</em> send signals to Grinder processes that are
    listening. (See the <a
    href="site:getting-started/properties">properties</a>
    <code>grinder.useConsole</code>, <code>grinder.consoleHost</code>
    and <code>consolePort</code>.)</p>

    <p>Worker processes that are configured to receive console signals
    go through three states:</p>

    <ol>
      <li>Initiated (waiting for a console signal)</li>

      <li>Running (performing tests, reporting to console)</li>

      <li>Finished (waiting for a console signal)</li>
    </ol>

    <p>The <em>Start processes</em> control signals to worker
    processes that they should move into the running state. Processes
    that are already running ignore this signal. Processes that are in
    the finished state exit; the agent process will then reread the
    properties file and launch new worker processes in the running
    state.</p>

    <p>The <em>Reset processes</em> control signals all the worker
    processes to exit. The agent process will then reread the
    properties file and launch new worker processes.</p>

    <p>The <em>Stop processes</em> control signals all processes,
    including the agent processes, to exit. You usually want to use
    <em>Reset processes</em> instead.</p>

    <warning>Each time the worker processes run, they generate a new
    set of logs. Logs from previous runs are "archived" by renaming
    them. The number of logs that are kept from previous runs can be
    controlled with <code> grinder.numberOfOldLogs</code>.</warning>

  </section>

  <section>
    <title>Sample controls</title>

    <p>The sample controls determine how the console captures reports
    from the worker processes. It is important to understand that
    these only control the console behaviour. For example, they do not
    adjust the frequency at which the worker processes send reports
    (see <a
    href="site:getting-started/properties"><code>grinder.reportToConsole.interval</code></a>
    for that). Additionally, the sample controls do not interact in
    any way with the process controls.</p>

    <p>The slider controls the period at which the console will take a
    <em>sample</em>. This involves adding up all the reports received
    over that sample interval and calculating the TPS as (number of
    tests that occurred)/(interval length). It is also the period at
    which the console graphs and statistics are updated.</p>

    <p>By default, the console discards the first non-zero sample
    period, and starts updating the display and calculating totals
    from the second sample. A non-zero sample period is one in which
    an update from a worker process was received. You can adjust how
    many non-zero sample periods the console ignores before starting
    capture with the <em>ignore samples</em> text field.</p>

    <p>The third control allows you to adjust how many samples the
    console will collect before stopping capture.</p>

    <p>You can also manually start and stop the sampling with the
    <em>Capture statistics</em>/<em>Stop capture</em> control. Use the
    <em>Save statistics</em> control to save the current set of
    statistics to a file.</p>
  </section>

  <section>
    <title>Display</title>

    <p>Each graph displays the 25 most recent Tests Per Second (TPS)
    values for a particular test. A new value is added every console
    sample period. The y-axis is scaled so that the full height
    represents the peak TPS value received for the test since the
    display was last reset.</p>

    <p>The colours are based on the relative response time. Long
    response times are more red, short response times are more yellow.
    This acts as an eye-catcher, allowing expensive tests to be easily
    spotted.</p>
  </section>

  <section>
    <title>Internationalisation help wanted</title>

    <p>If you are bilingual you might fancy <a
    href="site:contributing/translating">translating the console</a>
    into a language of your choice.</p>
  </section>

</body>
</document>

